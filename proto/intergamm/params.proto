syntax = "proto3";
package quasarlabs.quasarnode.intergamm;

import "gogoproto/gogo.proto";

option go_package = "github.com/quasarlabs/quasarnode/x/intergamm/types";

// Zone ID is our own unique ID for each chain we have a connect to. This enables us to store info about 2 hains that might have the same chain ID.

message ZoneRouteInfo {
  option (gogoproto.equal) = true;

  // zone ID: a unique ID for source zone of this route
  string zone_id  = 1
   [(gogoproto.moretags) = "yaml:\"zone_id\",  json:\"zone_id\""];

  // chain ID of the source zone
  string chain_id = 2
   [(gogoproto.moretags) = "yaml:\"chain_id\", json:\"chain_id\""];

  // counterparty zone ID: a unique ID for destination zone of this route
  string counterparty_zone_id  = 3
   [(gogoproto.moretags) = "yaml:\"counterparty_zone_id\",  json:\"counterparty_zone_id\""];

  // chain ID of the destination zone
  string counterparty_chain_id = 4
   [(gogoproto.moretags) = "yaml:\"counterparty_chain_id\", json:\"counterparty_chain_id\""];

  // IBC connection ID from source to destination
  string connection_id = 5
   [(gogoproto.moretags) = "yaml:\"connection_id\", json:\"connection_id\""];

  // IBC port ID from source to destination (usually 'transfer')
  string port_id = 6
   [(gogoproto.moretags) = "yaml:\"port_id\", json:\"port_id\""];

  // IBC channel ID from source to destination
  string channel_id = 7
   [(gogoproto.moretags) = "yaml:\"channel_id\", json:\"channel_id\""];

  // IBC counterparty connection ID from destination to source
  string counterparty_connection_id = 8
   [(gogoproto.moretags) = "yaml:\"counterparty_connection_id\", json:\"counterparty_connection_id\""];

  // IBC counterparty port ID from destination to source (usually 'transfer')
  string counterparty_port_id = 9
   [(gogoproto.moretags) = "yaml:\"counterparty_port_id\", json:\"counterparty_port_id\""];

  // IBC counterparty channel ID from destination to source
  string counterparty_channel_id = 10
   [(gogoproto.moretags) = "yaml:\"counterparty_channel_id\", json:\"counterparty_channel_id\""];

  // IBC counterparty version
  string counterparty_version = 11
   [(gogoproto.moretags) = "yaml:\"counterparty_version\", json:\"counterparty_version\""];
}

// IntermediateReceiver 
message ZoneCompleteInfo {
  option (gogoproto.equal) = true;
  ZoneRouteInfo zone_route_info = 1
   [(gogoproto.moretags) = "yaml:\"zone_route_info\",json:\"zone_route_info\"",
    (gogoproto.nullable) = false];

  map<string, ZoneRouteInfo> next_zone_route_map = 3
   [(gogoproto.moretags) = "yaml:\"next_zone_route_map\",json:\"next_zone_route_map\"",
    (gogoproto.nullable) = false]; // key zone-id
}

// Params defines the parameters for the module.
message Params {
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.equal) = true;

  map<string, string> quasar_denom_to_native_zone_id_map = 1
   [(gogoproto.moretags) = "yaml:\"quasar_denom_to_native_zone_id_map\",json:\"quasar_denom_to_native_zone_id_map\"",
    (gogoproto.nullable) = false];

  map<string, string> osmosis_denom_to_quasar_denom_map = 2
   [(gogoproto.moretags) = "yaml:\"osmosis_denom_to_quasar_denom_map\",json:\"osmosis_denom_to_quasar_denom_map\"",
    (gogoproto.nullable) = false];

  map<string, ZoneCompleteInfo> complete_zone_info_map = 3
   [(gogoproto.moretags) = "yaml:\"complete_zone_info_map\",json:\"complete_zone_info_map\"",
    (gogoproto.nullable) = false];
}
