// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: orion/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryReserveBalanceRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryReserveBalanceRequest) Reset()         { *m = QueryReserveBalanceRequest{} }
func (m *QueryReserveBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReserveBalanceRequest) ProtoMessage()    {}
func (*QueryReserveBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{2}
}
func (m *QueryReserveBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveBalanceRequest.Merge(m, src)
}
func (m *QueryReserveBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveBalanceRequest proto.InternalMessageInfo

func (m *QueryReserveBalanceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryReserveBalanceResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryReserveBalanceResponse) Reset()         { *m = QueryReserveBalanceResponse{} }
func (m *QueryReserveBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReserveBalanceResponse) ProtoMessage()    {}
func (*QueryReserveBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{3}
}
func (m *QueryReserveBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReserveBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReserveBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReserveBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReserveBalanceResponse.Merge(m, src)
}
func (m *QueryReserveBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReserveBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReserveBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReserveBalanceResponse proto.InternalMessageInfo

func (m *QueryReserveBalanceResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

//
//message QueryGetFeeDataRequest {}
//
//message QueryGetFeeDataResponse {
//FeeData FeeData = 1 [(gogoproto.nullable) = false];
//}
type QueryGetLpPositionRequest struct {
}

func (m *QueryGetLpPositionRequest) Reset()         { *m = QueryGetLpPositionRequest{} }
func (m *QueryGetLpPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLpPositionRequest) ProtoMessage()    {}
func (*QueryGetLpPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{4}
}
func (m *QueryGetLpPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLpPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLpPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLpPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLpPositionRequest.Merge(m, src)
}
func (m *QueryGetLpPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLpPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLpPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLpPositionRequest proto.InternalMessageInfo

type QueryGetLpPositionResponse struct {
	LpPosition LpPosition `protobuf:"bytes,1,opt,name=LpPosition,proto3" json:"LpPosition"`
}

func (m *QueryGetLpPositionResponse) Reset()         { *m = QueryGetLpPositionResponse{} }
func (m *QueryGetLpPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLpPositionResponse) ProtoMessage()    {}
func (*QueryGetLpPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{5}
}
func (m *QueryGetLpPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLpPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLpPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLpPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLpPositionResponse.Merge(m, src)
}
func (m *QueryGetLpPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLpPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLpPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLpPositionResponse proto.InternalMessageInfo

func (m *QueryGetLpPositionResponse) GetLpPosition() LpPosition {
	if m != nil {
		return m.LpPosition
	}
	return LpPosition{}
}

type QueryGetEpochLPInfoRequest struct {
}

func (m *QueryGetEpochLPInfoRequest) Reset()         { *m = QueryGetEpochLPInfoRequest{} }
func (m *QueryGetEpochLPInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLPInfoRequest) ProtoMessage()    {}
func (*QueryGetEpochLPInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{6}
}
func (m *QueryGetEpochLPInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLPInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLPInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLPInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLPInfoRequest.Merge(m, src)
}
func (m *QueryGetEpochLPInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLPInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLPInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLPInfoRequest proto.InternalMessageInfo

type QueryGetEpochLPInfoResponse struct {
	EpochLPInfo EpochLPInfo `protobuf:"bytes,1,opt,name=EpochLPInfo,proto3" json:"EpochLPInfo"`
}

func (m *QueryGetEpochLPInfoResponse) Reset()         { *m = QueryGetEpochLPInfoResponse{} }
func (m *QueryGetEpochLPInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLPInfoResponse) ProtoMessage()    {}
func (*QueryGetEpochLPInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{7}
}
func (m *QueryGetEpochLPInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLPInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLPInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLPInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLPInfoResponse.Merge(m, src)
}
func (m *QueryGetEpochLPInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLPInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLPInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLPInfoResponse proto.InternalMessageInfo

func (m *QueryGetEpochLPInfoResponse) GetEpochLPInfo() EpochLPInfo {
	if m != nil {
		return m.EpochLPInfo
	}
	return EpochLPInfo{}
}

type QueryGetRewardCollectionRequest struct {
}

func (m *QueryGetRewardCollectionRequest) Reset()         { *m = QueryGetRewardCollectionRequest{} }
func (m *QueryGetRewardCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardCollectionRequest) ProtoMessage()    {}
func (*QueryGetRewardCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{8}
}
func (m *QueryGetRewardCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardCollectionRequest.Merge(m, src)
}
func (m *QueryGetRewardCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardCollectionRequest proto.InternalMessageInfo

type QueryGetRewardCollectionResponse struct {
	RewardCollection RewardCollection `protobuf:"bytes,1,opt,name=RewardCollection,proto3" json:"RewardCollection"`
}

func (m *QueryGetRewardCollectionResponse) Reset()         { *m = QueryGetRewardCollectionResponse{} }
func (m *QueryGetRewardCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRewardCollectionResponse) ProtoMessage()    {}
func (*QueryGetRewardCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{9}
}
func (m *QueryGetRewardCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRewardCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRewardCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRewardCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRewardCollectionResponse.Merge(m, src)
}
func (m *QueryGetRewardCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRewardCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRewardCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRewardCollectionResponse proto.InternalMessageInfo

func (m *QueryGetRewardCollectionResponse) GetRewardCollection() RewardCollection {
	if m != nil {
		return m.RewardCollection
	}
	return RewardCollection{}
}

type QueryGetUserLPInfoRequest struct {
}

func (m *QueryGetUserLPInfoRequest) Reset()         { *m = QueryGetUserLPInfoRequest{} }
func (m *QueryGetUserLPInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserLPInfoRequest) ProtoMessage()    {}
func (*QueryGetUserLPInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{10}
}
func (m *QueryGetUserLPInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserLPInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserLPInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserLPInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserLPInfoRequest.Merge(m, src)
}
func (m *QueryGetUserLPInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserLPInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserLPInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserLPInfoRequest proto.InternalMessageInfo

type QueryGetUserLPInfoResponse struct {
	UserLPInfo UserLPInfo `protobuf:"bytes,1,opt,name=UserLPInfo,proto3" json:"UserLPInfo"`
}

func (m *QueryGetUserLPInfoResponse) Reset()         { *m = QueryGetUserLPInfoResponse{} }
func (m *QueryGetUserLPInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserLPInfoResponse) ProtoMessage()    {}
func (*QueryGetUserLPInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{11}
}
func (m *QueryGetUserLPInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserLPInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserLPInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserLPInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserLPInfoResponse.Merge(m, src)
}
func (m *QueryGetUserLPInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserLPInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserLPInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserLPInfoResponse proto.InternalMessageInfo

func (m *QueryGetUserLPInfoResponse) GetUserLPInfo() UserLPInfo {
	if m != nil {
		return m.UserLPInfo
	}
	return UserLPInfo{}
}

type QueryGetLpStatRequest struct {
}

func (m *QueryGetLpStatRequest) Reset()         { *m = QueryGetLpStatRequest{} }
func (m *QueryGetLpStatRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLpStatRequest) ProtoMessage()    {}
func (*QueryGetLpStatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{12}
}
func (m *QueryGetLpStatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLpStatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLpStatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLpStatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLpStatRequest.Merge(m, src)
}
func (m *QueryGetLpStatRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLpStatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLpStatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLpStatRequest proto.InternalMessageInfo

type QueryGetLpStatResponse struct {
	LpStat LpStat `protobuf:"bytes,1,opt,name=LpStat,proto3" json:"LpStat"`
}

func (m *QueryGetLpStatResponse) Reset()         { *m = QueryGetLpStatResponse{} }
func (m *QueryGetLpStatResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLpStatResponse) ProtoMessage()    {}
func (*QueryGetLpStatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92ba854d0f1d3172, []int{13}
}
func (m *QueryGetLpStatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLpStatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLpStatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLpStatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLpStatResponse.Merge(m, src)
}
func (m *QueryGetLpStatResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLpStatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLpStatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLpStatResponse proto.InternalMessageInfo

func (m *QueryGetLpStatResponse) GetLpStat() LpStat {
	if m != nil {
		return m.LpStat
	}
	return LpStat{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "abag.quasarnode.orion.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "abag.quasarnode.orion.QueryParamsResponse")
	proto.RegisterType((*QueryReserveBalanceRequest)(nil), "abag.quasarnode.orion.QueryReserveBalanceRequest")
	proto.RegisterType((*QueryReserveBalanceResponse)(nil), "abag.quasarnode.orion.QueryReserveBalanceResponse")
	proto.RegisterType((*QueryGetLpPositionRequest)(nil), "abag.quasarnode.orion.QueryGetLpPositionRequest")
	proto.RegisterType((*QueryGetLpPositionResponse)(nil), "abag.quasarnode.orion.QueryGetLpPositionResponse")
	proto.RegisterType((*QueryGetEpochLPInfoRequest)(nil), "abag.quasarnode.orion.QueryGetEpochLPInfoRequest")
	proto.RegisterType((*QueryGetEpochLPInfoResponse)(nil), "abag.quasarnode.orion.QueryGetEpochLPInfoResponse")
	proto.RegisterType((*QueryGetRewardCollectionRequest)(nil), "abag.quasarnode.orion.QueryGetRewardCollectionRequest")
	proto.RegisterType((*QueryGetRewardCollectionResponse)(nil), "abag.quasarnode.orion.QueryGetRewardCollectionResponse")
	proto.RegisterType((*QueryGetUserLPInfoRequest)(nil), "abag.quasarnode.orion.QueryGetUserLPInfoRequest")
	proto.RegisterType((*QueryGetUserLPInfoResponse)(nil), "abag.quasarnode.orion.QueryGetUserLPInfoResponse")
	proto.RegisterType((*QueryGetLpStatRequest)(nil), "abag.quasarnode.orion.QueryGetLpStatRequest")
	proto.RegisterType((*QueryGetLpStatResponse)(nil), "abag.quasarnode.orion.QueryGetLpStatResponse")
}

func init() { proto.RegisterFile("orion/query.proto", fileDescriptor_92ba854d0f1d3172) }

var fileDescriptor_92ba854d0f1d3172 = []byte{
	// 768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0xe3, 0xab, 0x36, 0xba, 0x77, 0x2a, 0x5d, 0xdd, 0x3b, 0xfd, 0x76, 0x5b, 0xb7, 0x1d,
	0xda, 0x52, 0x42, 0xb1, 0x9b, 0x20, 0xca, 0x82, 0x5d, 0x10, 0xaa, 0x40, 0x5d, 0x14, 0xa3, 0x2e,
	0x60, 0x13, 0x4d, 0xd2, 0xa9, 0x6b, 0x29, 0xf1, 0xb8, 0x9e, 0x49, 0xa1, 0x42, 0xdd, 0xb0, 0x60,
	0x87, 0x84, 0xc4, 0x1a, 0x16, 0xbc, 0x00, 0x2b, 0xde, 0xa1, 0xcb, 0x4a, 0x6c, 0x58, 0x21, 0xd4,
	0xf2, 0x00, 0x3c, 0x02, 0xca, 0xcc, 0xb8, 0x9e, 0xd8, 0x71, 0xdd, 0xee, 0xe2, 0x73, 0xce, 0xff,
	0x9c, 0xdf, 0xf8, 0xcc, 0x39, 0x0e, 0xf8, 0x9f, 0x46, 0x3e, 0x0d, 0x9c, 0x83, 0x2e, 0x89, 0x8e,
	0xec, 0x30, 0xa2, 0x9c, 0xc2, 0x71, 0xdc, 0xc4, 0x9e, 0x7d, 0xd0, 0xc5, 0x0c, 0x47, 0x01, 0xdd,
	0x25, 0xb6, 0x08, 0x31, 0xc7, 0x3c, 0xea, 0x51, 0x11, 0xe1, 0xf4, 0x7e, 0xc9, 0x60, 0x73, 0xd6,
	0xa3, 0xd4, 0x6b, 0x13, 0x07, 0x87, 0xbe, 0x83, 0x83, 0x80, 0x72, 0xcc, 0x7d, 0x1a, 0x30, 0xe5,
	0xad, 0xb4, 0x28, 0xeb, 0x50, 0xe6, 0x34, 0x31, 0x23, 0xb2, 0x86, 0x73, 0x58, 0x6d, 0x12, 0x8e,
	0xab, 0x4e, 0x88, 0x3d, 0x3f, 0x10, 0xc1, 0x2a, 0x16, 0x4a, 0x92, 0x10, 0x47, 0xb8, 0x13, 0xeb,
	0x27, 0xa5, 0xad, 0x1d, 0x36, 0x42, 0xca, 0x7c, 0x2d, 0x78, 0x5a, 0x3a, 0x48, 0x48, 0x5b, 0xfb,
	0x8d, 0x76, 0xd8, 0xf0, 0x83, 0xbd, 0x98, 0x68, 0x4e, 0xba, 0x22, 0xf2, 0x12, 0x47, 0xbb, 0x8d,
	0x16, 0x6d, 0xb7, 0x49, 0x4b, 0x53, 0x4e, 0x49, 0x77, 0x97, 0x91, 0x28, 0x25, 0x1c, 0xbd, 0x28,
	0xc6, 0x38, 0xe6, 0xd2, 0x88, 0xc6, 0x00, 0x7c, 0xda, 0xe3, 0xde, 0x16, 0x58, 0x2e, 0x39, 0xe8,
	0x12, 0xc6, 0x91, 0x0b, 0x46, 0xfb, 0xac, 0x2c, 0xa4, 0x01, 0x23, 0xf0, 0x01, 0x28, 0x4b, 0xfc,
	0x29, 0x63, 0xc1, 0x58, 0x1d, 0xa9, 0xcd, 0xd9, 0x03, 0x5f, 0xa5, 0x2d, 0x65, 0xf5, 0xa1, 0x93,
	0x1f, 0xf3, 0x25, 0x57, 0x49, 0x50, 0x0d, 0x98, 0x22, 0xa7, 0x4b, 0x18, 0x89, 0x0e, 0x49, 0x1d,
	0xb7, 0x71, 0xd0, 0x22, 0xaa, 0x22, 0x1c, 0x03, 0xc3, 0xbb, 0x24, 0xa0, 0x1d, 0x91, 0xf9, 0x1f,
	0x57, 0x3e, 0xa0, 0x7b, 0x60, 0x66, 0xa0, 0x46, 0xf1, 0x4c, 0x80, 0x32, 0xee, 0xd0, 0x6e, 0xc0,
	0x85, 0x6a, 0xc8, 0x55, 0x4f, 0x68, 0x06, 0x4c, 0x0b, 0xd9, 0x26, 0xe1, 0x5b, 0xe1, 0xb6, 0x7a,
	0xb3, 0xf1, 0xd9, 0x88, 0xe2, 0x48, 0x39, 0x55, 0xca, 0x4d, 0x00, 0x12, 0xab, 0x3a, 0xe6, 0x62,
	0xce, 0x31, 0x93, 0x40, 0x75, 0x54, 0x4d, 0x8a, 0x66, 0x93, 0x32, 0x8f, 0x7a, 0x5d, 0xdc, 0xda,
	0x7e, 0x1c, 0xec, 0xd1, 0x18, 0xc2, 0x57, 0x07, 0x4b, 0x7b, 0x15, 0xc5, 0x13, 0x30, 0xa2, 0x99,
	0x15, 0x06, 0xca, 0xc1, 0xd0, 0x22, 0x15, 0x87, 0x2e, 0x46, 0x8b, 0x60, 0x3e, 0x2e, 0xe5, 0x8a,
	0x3b, 0xf3, 0xf0, 0xe2, 0xca, 0xc4, 0x34, 0xc7, 0x60, 0x21, 0x3f, 0x44, 0x21, 0x3d, 0x07, 0xff,
	0xa5, 0x7d, 0x8a, 0xeb, 0x66, 0x0e, 0x57, 0x3a, 0x5c, 0xc1, 0x65, 0xd2, 0xe8, 0xed, 0xda, 0x61,
	0x24, 0xea, 0x7f, 0x53, 0x5a, 0xbb, 0x74, 0x67, 0xd2, 0xae, 0xc4, 0x5a, 0xd0, 0xae, 0x24, 0x30,
	0x6e, 0x57, 0x62, 0x41, 0x93, 0x60, 0x3c, 0xb9, 0x15, 0xcf, 0x38, 0xe6, 0x71, 0xfd, 0x1d, 0x30,
	0x91, 0x76, 0x24, 0xd3, 0x20, 0x2d, 0x05, 0xd3, 0x20, 0x83, 0xe2, 0x69, 0x90, 0x4f, 0xb5, 0xdf,
	0x7f, 0x83, 0x61, 0x91, 0x17, 0xbe, 0x35, 0x40, 0x59, 0x0e, 0x0c, 0xbc, 0x95, 0x93, 0x21, 0x3b,
	0xa1, 0x66, 0xe5, 0x2a, 0xa1, 0x12, 0x14, 0x2d, 0xbf, 0xf9, 0xf6, 0xeb, 0xc3, 0x5f, 0xf3, 0x70,
	0xce, 0xe9, 0x69, 0x9c, 0x44, 0xe3, 0xe8, 0x2b, 0x09, 0x7e, 0x31, 0xc0, 0xbf, 0xfd, 0x83, 0x06,
	0xab, 0x97, 0x55, 0x19, 0x38, 0xc8, 0x66, 0xed, 0x3a, 0x12, 0x05, 0xb8, 0x21, 0x00, 0xd7, 0xa1,
	0x9d, 0x03, 0x18, 0x49, 0x59, 0xa3, 0x29, 0x75, 0xce, 0x6b, 0xb1, 0x1d, 0x8e, 0xe1, 0x47, 0x43,
	0x9f, 0x56, 0xb8, 0x7e, 0x59, 0xe9, 0x41, 0xbb, 0xc0, 0xac, 0x5e, 0x43, 0xa1, 0x58, 0x2b, 0x82,
	0x75, 0x09, 0xa2, 0x1c, 0x56, 0x6d, 0x97, 0xc3, 0xcf, 0x46, 0xdf, 0x1c, 0xc3, 0xa2, 0x72, 0xd9,
	0x45, 0x71, 0xf9, 0xeb, 0x1c, 0xbc, 0x3d, 0xd0, 0x9a, 0x40, 0x5c, 0x81, 0x4b, 0x39, 0x88, 0x7d,
	0x5f, 0x15, 0xf8, 0xd5, 0xc8, 0x4e, 0x36, 0xdc, 0x28, 0x28, 0x9b, 0xb3, 0x49, 0xcc, 0xfb, 0xd7,
	0xd6, 0x29, 0xe6, 0x75, 0xc1, 0x5c, 0x81, 0xab, 0xb9, 0x57, 0x20, 0xf5, 0xb9, 0x83, 0x9f, 0x0c,
	0x7d, 0xf6, 0x0b, 0x9b, 0x9f, 0xd9, 0x2c, 0x85, 0xcd, 0xcf, 0xae, 0x1b, 0x74, 0x5b, 0x50, 0x2e,
	0xc3, 0x1b, 0x39, 0x94, 0xfa, 0x57, 0x17, 0xbe, 0x33, 0xe2, 0x05, 0x01, 0xd7, 0x0a, 0xef, 0x99,
	0xb6, 0x72, 0xcc, 0x3b, 0x57, 0x8c, 0x56, 0x50, 0x2b, 0x02, 0x6a, 0x01, 0x5a, 0xf9, 0x37, 0xb2,
	0xf7, 0xc1, 0xaf, 0xd7, 0x4f, 0xce, 0x2c, 0xe3, 0xf4, 0xcc, 0x32, 0x7e, 0x9e, 0x59, 0xc6, 0xfb,
	0x73, 0xab, 0x74, 0x7a, 0x6e, 0x95, 0xbe, 0x9f, 0x5b, 0xa5, 0x17, 0xab, 0x9e, 0xcf, 0xf7, 0xbb,
	0x4d, 0xbb, 0x45, 0x3b, 0x99, 0x1c, 0xaf, 0x54, 0x16, 0x7e, 0x14, 0x12, 0xd6, 0x2c, 0x8b, 0x7f,
	0x0d, 0x77, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xea, 0x74, 0xe6, 0xa8, 0x57, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ReserveBalance items.
	ReserveBalance(ctx context.Context, in *QueryReserveBalanceRequest, opts ...grpc.CallOption) (*QueryReserveBalanceResponse, error)
	// Queries a LpPosition by index.
	LpPosition(ctx context.Context, in *QueryGetLpPositionRequest, opts ...grpc.CallOption) (*QueryGetLpPositionResponse, error)
	// Queries a EpochLPInfo by index.
	EpochLPInfo(ctx context.Context, in *QueryGetEpochLPInfoRequest, opts ...grpc.CallOption) (*QueryGetEpochLPInfoResponse, error)
	// Queries a RewardCollection by index.
	RewardCollection(ctx context.Context, in *QueryGetRewardCollectionRequest, opts ...grpc.CallOption) (*QueryGetRewardCollectionResponse, error)
	// Queries a UserLPInfo by index.
	UserLPInfo(ctx context.Context, in *QueryGetUserLPInfoRequest, opts ...grpc.CallOption) (*QueryGetUserLPInfoResponse, error)
	// Queries a LpStat by index.
	LpStat(ctx context.Context, in *QueryGetLpStatRequest, opts ...grpc.CallOption) (*QueryGetLpStatResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.orion.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReserveBalance(ctx context.Context, in *QueryReserveBalanceRequest, opts ...grpc.CallOption) (*QueryReserveBalanceResponse, error) {
	out := new(QueryReserveBalanceResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.orion.Query/ReserveBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LpPosition(ctx context.Context, in *QueryGetLpPositionRequest, opts ...grpc.CallOption) (*QueryGetLpPositionResponse, error) {
	out := new(QueryGetLpPositionResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.orion.Query/LpPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochLPInfo(ctx context.Context, in *QueryGetEpochLPInfoRequest, opts ...grpc.CallOption) (*QueryGetEpochLPInfoResponse, error) {
	out := new(QueryGetEpochLPInfoResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.orion.Query/EpochLPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardCollection(ctx context.Context, in *QueryGetRewardCollectionRequest, opts ...grpc.CallOption) (*QueryGetRewardCollectionResponse, error) {
	out := new(QueryGetRewardCollectionResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.orion.Query/RewardCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserLPInfo(ctx context.Context, in *QueryGetUserLPInfoRequest, opts ...grpc.CallOption) (*QueryGetUserLPInfoResponse, error) {
	out := new(QueryGetUserLPInfoResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.orion.Query/UserLPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LpStat(ctx context.Context, in *QueryGetLpStatRequest, opts ...grpc.CallOption) (*QueryGetLpStatResponse, error) {
	out := new(QueryGetLpStatResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.orion.Query/LpStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ReserveBalance items.
	ReserveBalance(context.Context, *QueryReserveBalanceRequest) (*QueryReserveBalanceResponse, error)
	// Queries a LpPosition by index.
	LpPosition(context.Context, *QueryGetLpPositionRequest) (*QueryGetLpPositionResponse, error)
	// Queries a EpochLPInfo by index.
	EpochLPInfo(context.Context, *QueryGetEpochLPInfoRequest) (*QueryGetEpochLPInfoResponse, error)
	// Queries a RewardCollection by index.
	RewardCollection(context.Context, *QueryGetRewardCollectionRequest) (*QueryGetRewardCollectionResponse, error)
	// Queries a UserLPInfo by index.
	UserLPInfo(context.Context, *QueryGetUserLPInfoRequest) (*QueryGetUserLPInfoResponse, error)
	// Queries a LpStat by index.
	LpStat(context.Context, *QueryGetLpStatRequest) (*QueryGetLpStatResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ReserveBalance(ctx context.Context, req *QueryReserveBalanceRequest) (*QueryReserveBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveBalance not implemented")
}
func (*UnimplementedQueryServer) LpPosition(ctx context.Context, req *QueryGetLpPositionRequest) (*QueryGetLpPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LpPosition not implemented")
}
func (*UnimplementedQueryServer) EpochLPInfo(ctx context.Context, req *QueryGetEpochLPInfoRequest) (*QueryGetEpochLPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochLPInfo not implemented")
}
func (*UnimplementedQueryServer) RewardCollection(ctx context.Context, req *QueryGetRewardCollectionRequest) (*QueryGetRewardCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardCollection not implemented")
}
func (*UnimplementedQueryServer) UserLPInfo(ctx context.Context, req *QueryGetUserLPInfoRequest) (*QueryGetUserLPInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLPInfo not implemented")
}
func (*UnimplementedQueryServer) LpStat(ctx context.Context, req *QueryGetLpStatRequest) (*QueryGetLpStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LpStat not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.orion.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReserveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReserveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReserveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.orion.Query/ReserveBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReserveBalance(ctx, req.(*QueryReserveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LpPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLpPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LpPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.orion.Query/LpPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LpPosition(ctx, req.(*QueryGetLpPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochLPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochLPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochLPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.orion.Query/EpochLPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochLPInfo(ctx, req.(*QueryGetEpochLPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.orion.Query/RewardCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardCollection(ctx, req.(*QueryGetRewardCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserLPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserLPInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserLPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.orion.Query/UserLPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserLPInfo(ctx, req.(*QueryGetUserLPInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LpStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLpStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LpStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.orion.Query/LpStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LpStat(ctx, req.(*QueryGetLpStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "abag.quasarnode.orion.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ReserveBalance",
			Handler:    _Query_ReserveBalance_Handler,
		},
		{
			MethodName: "LpPosition",
			Handler:    _Query_LpPosition_Handler,
		},
		{
			MethodName: "EpochLPInfo",
			Handler:    _Query_EpochLPInfo_Handler,
		},
		{
			MethodName: "RewardCollection",
			Handler:    _Query_RewardCollection_Handler,
		},
		{
			MethodName: "UserLPInfo",
			Handler:    _Query_UserLPInfo_Handler,
		},
		{
			MethodName: "LpStat",
			Handler:    _Query_LpStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orion/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReserveBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryReserveBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReserveBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReserveBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLpPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLpPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLpPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLpPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLpPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLpPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LpPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLPInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLPInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLPInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLPInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLPInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLPInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochLPInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetRewardCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRewardCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRewardCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardCollection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUserLPInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserLPInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserLPInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetUserLPInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserLPInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserLPInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserLPInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLpStatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLpStatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLpStatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLpStatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLpStatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLpStatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LpStat.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReserveBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryReserveBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryGetLpPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLpPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LpPosition.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEpochLPInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEpochLPInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochLPInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetRewardCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetRewardCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardCollection.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUserLPInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetUserLPInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserLPInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLpStatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLpStatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LpStat.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReserveBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReserveBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReserveBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLpPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLpPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLpPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLpPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLpPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLpPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LpPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLPInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLPInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLPInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLPInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLPInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLPInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLPInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochLPInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRewardCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRewardCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRewardCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCollection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardCollection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserLPInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserLPInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserLPInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserLPInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserLPInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserLPInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLPInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserLPInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLpStatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLpStatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLpStatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLpStatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLpStatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLpStatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LpStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
