// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qbank/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryUserDenomDepositRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
	Denom   string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryUserDenomDepositRequest) Reset()         { *m = QueryUserDenomDepositRequest{} }
func (m *QueryUserDenomDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomDepositRequest) ProtoMessage()    {}
func (*QueryUserDenomDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{2}
}
func (m *QueryUserDenomDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomDepositRequest.Merge(m, src)
}
func (m *QueryUserDenomDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomDepositRequest proto.InternalMessageInfo

func (m *QueryUserDenomDepositRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

func (m *QueryUserDenomDepositRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryUserDenomDepositResponse struct {
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryUserDenomDepositResponse) Reset()         { *m = QueryUserDenomDepositResponse{} }
func (m *QueryUserDenomDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserDenomDepositResponse) ProtoMessage()    {}
func (*QueryUserDenomDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{3}
}
func (m *QueryUserDenomDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDenomDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDenomDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDenomDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDenomDepositResponse.Merge(m, src)
}
func (m *QueryUserDenomDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDenomDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDenomDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDenomDepositResponse proto.InternalMessageInfo

func (m *QueryUserDenomDepositResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QueryUserDepositRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
}

func (m *QueryUserDepositRequest) Reset()         { *m = QueryUserDepositRequest{} }
func (m *QueryUserDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserDepositRequest) ProtoMessage()    {}
func (*QueryUserDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{4}
}
func (m *QueryUserDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDepositRequest.Merge(m, src)
}
func (m *QueryUserDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDepositRequest proto.InternalMessageInfo

func (m *QueryUserDepositRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

type QueryUserDepositResponse struct {
	Coins QCoins `protobuf:"bytes,1,opt,name=coins,proto3,castrepeated=github.com/abag/quasarnode/x/qbank/types.QCoins" json:"coins"`
}

func (m *QueryUserDepositResponse) Reset()         { *m = QueryUserDepositResponse{} }
func (m *QueryUserDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserDepositResponse) ProtoMessage()    {}
func (*QueryUserDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{5}
}
func (m *QueryUserDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserDepositResponse.Merge(m, src)
}
func (m *QueryUserDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserDepositResponse proto.InternalMessageInfo

func (m *QueryUserDepositResponse) GetCoins() QCoins {
	if m != nil {
		return m.Coins
	}
	return QCoins{}
}

type QueryUserClaimRewardsRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
}

func (m *QueryUserClaimRewardsRequest) Reset()         { *m = QueryUserClaimRewardsRequest{} }
func (m *QueryUserClaimRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserClaimRewardsRequest) ProtoMessage()    {}
func (*QueryUserClaimRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{6}
}
func (m *QueryUserClaimRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserClaimRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserClaimRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserClaimRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserClaimRewardsRequest.Merge(m, src)
}
func (m *QueryUserClaimRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserClaimRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserClaimRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserClaimRewardsRequest proto.InternalMessageInfo

func (m *QueryUserClaimRewardsRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

type QueryUserClaimRewardsResponse struct {
	Coins QCoins `protobuf:"bytes,1,opt,name=coins,proto3,castrepeated=github.com/abag/quasarnode/x/qbank/types.QCoins" json:"coins"`
}

func (m *QueryUserClaimRewardsResponse) Reset()         { *m = QueryUserClaimRewardsResponse{} }
func (m *QueryUserClaimRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserClaimRewardsResponse) ProtoMessage()    {}
func (*QueryUserClaimRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{7}
}
func (m *QueryUserClaimRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserClaimRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserClaimRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserClaimRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserClaimRewardsResponse.Merge(m, src)
}
func (m *QueryUserClaimRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserClaimRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserClaimRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserClaimRewardsResponse proto.InternalMessageInfo

func (m *QueryUserClaimRewardsResponse) GetCoins() QCoins {
	if m != nil {
		return m.Coins
	}
	return QCoins{}
}

type QueryWithdrawableRequest struct {
	UserAccount string `protobuf:"bytes,1,opt,name=userAccount,proto3" json:"userAccount,omitempty"`
	Denom       string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryWithdrawableRequest) Reset()         { *m = QueryWithdrawableRequest{} }
func (m *QueryWithdrawableRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawableRequest) ProtoMessage()    {}
func (*QueryWithdrawableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{8}
}
func (m *QueryWithdrawableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawableRequest.Merge(m, src)
}
func (m *QueryWithdrawableRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawableRequest proto.InternalMessageInfo

func (m *QueryWithdrawableRequest) GetUserAccount() string {
	if m != nil {
		return m.UserAccount
	}
	return ""
}

func (m *QueryWithdrawableRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryWithdrawableResponse struct {
	Coin types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
}

func (m *QueryWithdrawableResponse) Reset()         { *m = QueryWithdrawableResponse{} }
func (m *QueryWithdrawableResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawableResponse) ProtoMessage()    {}
func (*QueryWithdrawableResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{9}
}
func (m *QueryWithdrawableResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawableResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawableResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawableResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawableResponse.Merge(m, src)
}
func (m *QueryWithdrawableResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawableResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawableResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawableResponse proto.InternalMessageInfo

func (m *QueryWithdrawableResponse) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type QueryTotalWithdrawRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
	VaultID string `protobuf:"bytes,2,opt,name=vaultID,proto3" json:"vaultID,omitempty"`
}

func (m *QueryTotalWithdrawRequest) Reset()         { *m = QueryTotalWithdrawRequest{} }
func (m *QueryTotalWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalWithdrawRequest) ProtoMessage()    {}
func (*QueryTotalWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{10}
}
func (m *QueryTotalWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalWithdrawRequest.Merge(m, src)
}
func (m *QueryTotalWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalWithdrawRequest proto.InternalMessageInfo

func (m *QueryTotalWithdrawRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

func (m *QueryTotalWithdrawRequest) GetVaultID() string {
	if m != nil {
		return m.VaultID
	}
	return ""
}

type QueryTotalWithdrawResponse struct {
	Coins QCoins `protobuf:"bytes,1,opt,name=coins,proto3,castrepeated=github.com/abag/quasarnode/x/qbank/types.QCoins" json:"coins"`
}

func (m *QueryTotalWithdrawResponse) Reset()         { *m = QueryTotalWithdrawResponse{} }
func (m *QueryTotalWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalWithdrawResponse) ProtoMessage()    {}
func (*QueryTotalWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{11}
}
func (m *QueryTotalWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalWithdrawResponse.Merge(m, src)
}
func (m *QueryTotalWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalWithdrawResponse proto.InternalMessageInfo

func (m *QueryTotalWithdrawResponse) GetCoins() QCoins {
	if m != nil {
		return m.Coins
	}
	return QCoins{}
}

type QueryTotalClaimedRequest struct {
	UserAcc string `protobuf:"bytes,1,opt,name=userAcc,proto3" json:"userAcc,omitempty"`
	VaultID string `protobuf:"bytes,2,opt,name=vaultID,proto3" json:"vaultID,omitempty"`
}

func (m *QueryTotalClaimedRequest) Reset()         { *m = QueryTotalClaimedRequest{} }
func (m *QueryTotalClaimedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalClaimedRequest) ProtoMessage()    {}
func (*QueryTotalClaimedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{12}
}
func (m *QueryTotalClaimedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalClaimedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalClaimedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalClaimedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalClaimedRequest.Merge(m, src)
}
func (m *QueryTotalClaimedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalClaimedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalClaimedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalClaimedRequest proto.InternalMessageInfo

func (m *QueryTotalClaimedRequest) GetUserAcc() string {
	if m != nil {
		return m.UserAcc
	}
	return ""
}

func (m *QueryTotalClaimedRequest) GetVaultID() string {
	if m != nil {
		return m.VaultID
	}
	return ""
}

type QueryTotalClaimedResponse struct {
	Coins QCoins `protobuf:"bytes,1,opt,name=coins,proto3,castrepeated=github.com/abag/quasarnode/x/qbank/types.QCoins" json:"coins"`
}

func (m *QueryTotalClaimedResponse) Reset()         { *m = QueryTotalClaimedResponse{} }
func (m *QueryTotalClaimedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalClaimedResponse) ProtoMessage()    {}
func (*QueryTotalClaimedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_99a391b5aa6457bf, []int{13}
}
func (m *QueryTotalClaimedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalClaimedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalClaimedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalClaimedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalClaimedResponse.Merge(m, src)
}
func (m *QueryTotalClaimedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalClaimedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalClaimedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalClaimedResponse proto.InternalMessageInfo

func (m *QueryTotalClaimedResponse) GetCoins() QCoins {
	if m != nil {
		return m.Coins
	}
	return QCoins{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "abag.quasarnode.qbank.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "abag.quasarnode.qbank.QueryParamsResponse")
	proto.RegisterType((*QueryUserDenomDepositRequest)(nil), "abag.quasarnode.qbank.QueryUserDenomDepositRequest")
	proto.RegisterType((*QueryUserDenomDepositResponse)(nil), "abag.quasarnode.qbank.QueryUserDenomDepositResponse")
	proto.RegisterType((*QueryUserDepositRequest)(nil), "abag.quasarnode.qbank.QueryUserDepositRequest")
	proto.RegisterType((*QueryUserDepositResponse)(nil), "abag.quasarnode.qbank.QueryUserDepositResponse")
	proto.RegisterType((*QueryUserClaimRewardsRequest)(nil), "abag.quasarnode.qbank.QueryUserClaimRewardsRequest")
	proto.RegisterType((*QueryUserClaimRewardsResponse)(nil), "abag.quasarnode.qbank.QueryUserClaimRewardsResponse")
	proto.RegisterType((*QueryWithdrawableRequest)(nil), "abag.quasarnode.qbank.QueryWithdrawableRequest")
	proto.RegisterType((*QueryWithdrawableResponse)(nil), "abag.quasarnode.qbank.QueryWithdrawableResponse")
	proto.RegisterType((*QueryTotalWithdrawRequest)(nil), "abag.quasarnode.qbank.QueryTotalWithdrawRequest")
	proto.RegisterType((*QueryTotalWithdrawResponse)(nil), "abag.quasarnode.qbank.QueryTotalWithdrawResponse")
	proto.RegisterType((*QueryTotalClaimedRequest)(nil), "abag.quasarnode.qbank.QueryTotalClaimedRequest")
	proto.RegisterType((*QueryTotalClaimedResponse)(nil), "abag.quasarnode.qbank.QueryTotalClaimedResponse")
}

func init() { proto.RegisterFile("qbank/query.proto", fileDescriptor_99a391b5aa6457bf) }

var fileDescriptor_99a391b5aa6457bf = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0x4f, 0x4f, 0x13, 0x4d,
	0x1c, 0xc7, 0x3b, 0x04, 0x4a, 0x18, 0x78, 0x92, 0xe7, 0x19, 0xfa, 0x68, 0xd9, 0x40, 0x21, 0x9b,
	0x98, 0x20, 0x89, 0x3b, 0x40, 0x25, 0xa0, 0x5c, 0xa4, 0x70, 0xf1, 0x82, 0xb0, 0xd1, 0x98, 0x78,
	0x69, 0xa6, 0xdb, 0x49, 0xd9, 0xd8, 0xdd, 0x69, 0xf7, 0x0f, 0x95, 0x90, 0x5e, 0x3c, 0x18, 0x35,
	0x31, 0x31, 0xf1, 0x35, 0x78, 0xf1, 0xaa, 0x89, 0x89, 0xaf, 0x80, 0x23, 0x89, 0x17, 0xbd, 0xa8,
	0x01, 0x5f, 0x88, 0x99, 0x3f, 0x5b, 0xb6, 0xb0, 0x6d, 0x97, 0x78, 0xe0, 0xb6, 0x3b, 0xcc, 0xf7,
	0xf7, 0xfb, 0xfc, 0xbe, 0x33, 0xfb, 0xa5, 0xf0, 0xbf, 0x66, 0x85, 0xb8, 0x4f, 0x71, 0x33, 0xa4,
	0xde, 0x81, 0xd1, 0xf0, 0x58, 0xc0, 0xd0, 0xff, 0xa4, 0x42, 0x6a, 0x46, 0x33, 0x24, 0x3e, 0xf1,
	0x5c, 0x56, 0xa5, 0x86, 0xd8, 0xa2, 0x4d, 0xd7, 0x18, 0xab, 0xd5, 0x29, 0x26, 0x0d, 0x1b, 0x13,
	0xd7, 0x65, 0x01, 0x09, 0x6c, 0xe6, 0xfa, 0x52, 0xa4, 0x2d, 0x58, 0xcc, 0x77, 0x98, 0x8f, 0x2b,
	0xc4, 0xa7, 0xb2, 0x1a, 0xde, 0x5f, 0xaa, 0xd0, 0x80, 0x2c, 0xe1, 0x06, 0xa9, 0xd9, 0xae, 0xd8,
	0xac, 0xf6, 0x22, 0xd9, 0xb3, 0x41, 0x3c, 0xe2, 0x44, 0xfa, 0x49, 0xb9, 0x56, 0xa5, 0x0d, 0xe6,
	0xdb, 0x81, 0x5a, 0xcc, 0xc9, 0xc5, 0x96, 0x1d, 0xec, 0x55, 0x3d, 0xd2, 0xea, 0x96, 0x5b, 0xcc,
	0x71, 0x3a, 0x25, 0x0b, 0xf1, 0xf6, 0x51, 0x63, 0x8b, 0xd9, 0xd1, 0xdf, 0x73, 0x35, 0x56, 0x63,
	0xe2, 0x11, 0xf3, 0x27, 0xb9, 0xaa, 0xe7, 0x20, 0xda, 0xe5, 0xa8, 0x3b, 0x82, 0xc4, 0xa4, 0xcd,
	0x90, 0xfa, 0x81, 0x6e, 0xc2, 0xc9, 0xae, 0x55, 0xbf, 0xc1, 0x5c, 0x9f, 0xa2, 0x75, 0x98, 0x95,
	0xc4, 0x79, 0x30, 0x07, 0xe6, 0xc7, 0x97, 0x67, 0x8c, 0x44, 0x9f, 0x0c, 0x29, 0x2b, 0x0d, 0x1f,
	0xfd, 0x98, 0xcd, 0x98, 0x4a, 0xa2, 0x6f, 0xc3, 0x69, 0x51, 0xf3, 0x91, 0x4f, 0xbd, 0x2d, 0xea,
	0x32, 0x67, 0x4b, 0x0e, 0xaa, 0x7a, 0xa2, 0x3c, 0x1c, 0x0d, 0x7d, 0xea, 0x6d, 0x58, 0x96, 0xa8,
	0x3e, 0x66, 0x46, 0xaf, 0x28, 0x07, 0x47, 0xaa, 0x5c, 0x90, 0x1f, 0x12, 0xeb, 0xf2, 0x45, 0x5f,
	0x85, 0x33, 0x3d, 0xea, 0x29, 0xda, 0x6b, 0x30, 0x4b, 0x1c, 0x16, 0xba, 0x81, 0xa8, 0x37, 0x6c,
	0xaa, 0x37, 0xbd, 0x08, 0xaf, 0xc7, 0x84, 0xe9, 0x18, 0xf4, 0x97, 0x00, 0xe6, 0x2f, 0xaa, 0x54,
	0xa7, 0x3a, 0x1c, 0xe1, 0x46, 0x0f, 0xb2, 0x65, 0x77, 0x93, 0x6f, 0x2a, 0xad, 0x72, 0x5b, 0x3e,
	0xfc, 0x9c, 0xc5, 0x35, 0x3b, 0xd8, 0x0b, 0x2b, 0x86, 0xc5, 0x1c, 0xcc, 0x05, 0xf8, 0x4c, 0x80,
	0x9f, 0x61, 0x79, 0xc2, 0xc1, 0x41, 0x83, 0xfa, 0x4a, 0x68, 0xca, 0x26, 0xfa, 0x5a, 0xcc, 0xc8,
	0xcd, 0x3a, 0xb1, 0x1d, 0x93, 0xb6, 0x88, 0x57, 0xf5, 0x07, 0x0f, 0xf1, 0x06, 0xc4, 0x3c, 0xeb,
	0x96, 0x5e, 0xc9, 0x24, 0xa6, 0xf2, 0xf4, 0xb1, 0xba, 0xdd, 0xa4, 0x52, 0xa7, 0xd1, 0x14, 0x73,
	0x70, 0x5c, 0x61, 0x77, 0x8e, 0x70, 0xcc, 0x8c, 0x2f, 0xf5, 0xb8, 0x16, 0x3b, 0x70, 0x2a, 0xa1,
	0xa6, 0x1a, 0xaf, 0x08, 0x87, 0x79, 0x67, 0x35, 0xdd, 0x94, 0x21, 0x3f, 0x19, 0x83, 0x7f, 0x32,
	0x86, 0xfa, 0x64, 0x0c, 0x4e, 0xa8, 0xae, 0xae, 0xd8, 0xac, 0x3f, 0x50, 0x15, 0x1f, 0xb2, 0x80,
	0xd4, 0xa3, 0xb2, 0x83, 0x6f, 0x6d, 0x1e, 0x8e, 0xee, 0x93, 0xb0, 0x1e, 0xdc, 0xdf, 0x52, 0x80,
	0xd1, 0xab, 0xfe, 0x1a, 0x40, 0x2d, 0xa9, 0xe2, 0x95, 0x9c, 0xc1, 0xb6, 0x3a, 0x03, 0xc1, 0x22,
	0xee, 0x04, 0xad, 0xfe, 0xcd, 0x70, 0xaf, 0x40, 0xdc, 0xae, 0x4e, 0xc1, 0xab, 0x98, 0x6d, 0xf9,
	0xfb, 0x18, 0x1c, 0x11, 0x2c, 0xe8, 0x05, 0x80, 0x59, 0x99, 0x4a, 0xe8, 0x66, 0xaf, 0x9e, 0x17,
	0x62, 0x50, 0x5b, 0x48, 0xb3, 0x55, 0x4e, 0xa6, 0xdf, 0x78, 0xfe, 0xf5, 0xf7, 0xbb, 0xa1, 0x59,
	0x34, 0x73, 0x81, 0x30, 0x1e, 0xf5, 0xe8, 0x0b, 0x80, 0xff, 0x9e, 0x4f, 0x2c, 0x54, 0xec, 0xd7,
	0xa7, 0x47, 0x5e, 0x6a, 0xb7, 0x2f, 0x27, 0x52, 0x98, 0xeb, 0x02, 0x73, 0x05, 0x15, 0x7b, 0x60,
	0xf2, 0x03, 0x2e, 0x8b, 0x2f, 0xa9, 0xac, 0xfe, 0x11, 0xe1, 0x43, 0x75, 0xe8, 0x6d, 0xf4, 0x1e,
	0xc0, 0xf1, 0x58, 0xfe, 0x21, 0x63, 0x30, 0x42, 0x17, 0x32, 0x4e, 0xbd, 0x5f, 0xd1, 0xae, 0x08,
	0x5a, 0x8c, 0x6e, 0xf5, 0xa7, 0x3d, 0xcf, 0x19, 0x99, 0x1c, 0x8f, 0xb8, 0xc1, 0x26, 0x27, 0x64,
	0xe9, 0x60, 0x93, 0x93, 0x52, 0x34, 0x9d, 0xc9, 0x16, 0x57, 0x96, 0x3d, 0x29, 0x8d, 0xc1, 0x7f,
	0x02, 0x70, 0x22, 0x1e, 0x5e, 0xa8, 0xaf, 0x6b, 0x09, 0xd1, 0xa9, 0x2d, 0xa6, 0x17, 0x28, 0xe0,
	0x0d, 0x01, 0xbc, 0x8e, 0xee, 0xf4, 0x00, 0x6e, 0xc5, 0x44, 0x1d, 0x54, 0x1e, 0xc2, 0x6d, 0x7c,
	0x28, 0x2e, 0x4b, 0x1b, 0x7d, 0x06, 0xf0, 0x9f, 0xae, 0x3c, 0x43, 0x7d, 0x31, 0x92, 0xc2, 0x54,
	0x5b, 0xba, 0x84, 0x22, 0x25, 0x79, 0xc0, 0x55, 0xe5, 0x88, 0xff, 0xcc, 0x66, 0x7c, 0xa8, 0x02,
	0xab, 0x8d, 0x3e, 0x02, 0x38, 0x11, 0x0f, 0xab, 0xfe, 0x86, 0x27, 0xe4, 0xa4, 0xb6, 0x98, 0x5e,
	0xa0, 0xb0, 0xef, 0x09, 0xec, 0xbb, 0x68, 0xad, 0x2f, 0xb6, 0x25, 0x55, 0x49, 0xd4, 0xa5, 0xd2,
	0xd1, 0x49, 0x01, 0x1c, 0x9f, 0x14, 0xc0, 0xaf, 0x93, 0x02, 0x78, 0x7b, 0x5a, 0xc8, 0x1c, 0x9f,
	0x16, 0x32, 0xdf, 0x4e, 0x0b, 0x99, 0x27, 0xf3, 0x69, 0xd3, 0xb2, 0x92, 0x15, 0xbf, 0x01, 0x8b,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x67, 0x3f, 0xc3, 0xb3, 0x02, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of UserDenomDeposit items.
	UserDenomDeposit(ctx context.Context, in *QueryUserDenomDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomDepositResponse, error)
	// Queries a list of UserDeposit items.
	UserDeposit(ctx context.Context, in *QueryUserDepositRequest, opts ...grpc.CallOption) (*QueryUserDepositResponse, error)
	// Queries a list of UserClaimRewards items.
	UserClaimRewards(ctx context.Context, in *QueryUserClaimRewardsRequest, opts ...grpc.CallOption) (*QueryUserClaimRewardsResponse, error)
	// Queries a list of Withdrawable items.
	Withdrawable(ctx context.Context, in *QueryWithdrawableRequest, opts ...grpc.CallOption) (*QueryWithdrawableResponse, error)
	// Queries a list of TotalWithdraw items.
	TotalWithdraw(ctx context.Context, in *QueryTotalWithdrawRequest, opts ...grpc.CallOption) (*QueryTotalWithdrawResponse, error)
	// Queries a list of TotalClaimed items.
	TotalClaimed(ctx context.Context, in *QueryTotalClaimedRequest, opts ...grpc.CallOption) (*QueryTotalClaimedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDenomDeposit(ctx context.Context, in *QueryUserDenomDepositRequest, opts ...grpc.CallOption) (*QueryUserDenomDepositResponse, error) {
	out := new(QueryUserDenomDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserDenomDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDeposit(ctx context.Context, in *QueryUserDepositRequest, opts ...grpc.CallOption) (*QueryUserDepositResponse, error) {
	out := new(QueryUserDepositResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserClaimRewards(ctx context.Context, in *QueryUserClaimRewardsRequest, opts ...grpc.CallOption) (*QueryUserClaimRewardsResponse, error) {
	out := new(QueryUserClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/UserClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Withdrawable(ctx context.Context, in *QueryWithdrawableRequest, opts ...grpc.CallOption) (*QueryWithdrawableResponse, error) {
	out := new(QueryWithdrawableResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/Withdrawable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalWithdraw(ctx context.Context, in *QueryTotalWithdrawRequest, opts ...grpc.CallOption) (*QueryTotalWithdrawResponse, error) {
	out := new(QueryTotalWithdrawResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/TotalWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalClaimed(ctx context.Context, in *QueryTotalClaimedRequest, opts ...grpc.CallOption) (*QueryTotalClaimedResponse, error) {
	out := new(QueryTotalClaimedResponse)
	err := c.cc.Invoke(ctx, "/abag.quasarnode.qbank.Query/TotalClaimed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of UserDenomDeposit items.
	UserDenomDeposit(context.Context, *QueryUserDenomDepositRequest) (*QueryUserDenomDepositResponse, error)
	// Queries a list of UserDeposit items.
	UserDeposit(context.Context, *QueryUserDepositRequest) (*QueryUserDepositResponse, error)
	// Queries a list of UserClaimRewards items.
	UserClaimRewards(context.Context, *QueryUserClaimRewardsRequest) (*QueryUserClaimRewardsResponse, error)
	// Queries a list of Withdrawable items.
	Withdrawable(context.Context, *QueryWithdrawableRequest) (*QueryWithdrawableResponse, error)
	// Queries a list of TotalWithdraw items.
	TotalWithdraw(context.Context, *QueryTotalWithdrawRequest) (*QueryTotalWithdrawResponse, error)
	// Queries a list of TotalClaimed items.
	TotalClaimed(context.Context, *QueryTotalClaimedRequest) (*QueryTotalClaimedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UserDenomDeposit(ctx context.Context, req *QueryUserDenomDepositRequest) (*QueryUserDenomDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDenomDeposit not implemented")
}
func (*UnimplementedQueryServer) UserDeposit(ctx context.Context, req *QueryUserDepositRequest) (*QueryUserDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeposit not implemented")
}
func (*UnimplementedQueryServer) UserClaimRewards(ctx context.Context, req *QueryUserClaimRewardsRequest) (*QueryUserClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserClaimRewards not implemented")
}
func (*UnimplementedQueryServer) Withdrawable(ctx context.Context, req *QueryWithdrawableRequest) (*QueryWithdrawableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdrawable not implemented")
}
func (*UnimplementedQueryServer) TotalWithdraw(ctx context.Context, req *QueryTotalWithdrawRequest) (*QueryTotalWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalWithdraw not implemented")
}
func (*UnimplementedQueryServer) TotalClaimed(ctx context.Context, req *QueryTotalClaimedRequest) (*QueryTotalClaimedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalClaimed not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDenomDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDenomDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDenomDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserDenomDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDenomDeposit(ctx, req.(*QueryUserDenomDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDeposit(ctx, req.(*QueryUserDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserClaimRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/UserClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserClaimRewards(ctx, req.(*QueryUserClaimRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Withdrawable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Withdrawable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/Withdrawable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Withdrawable(ctx, req.(*QueryWithdrawableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/TotalWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalWithdraw(ctx, req.(*QueryTotalWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalClaimed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalClaimedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalClaimed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/abag.quasarnode.qbank.Query/TotalClaimed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalClaimed(ctx, req.(*QueryTotalClaimedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "abag.quasarnode.qbank.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserDenomDeposit",
			Handler:    _Query_UserDenomDeposit_Handler,
		},
		{
			MethodName: "UserDeposit",
			Handler:    _Query_UserDeposit_Handler,
		},
		{
			MethodName: "UserClaimRewards",
			Handler:    _Query_UserClaimRewards_Handler,
		},
		{
			MethodName: "Withdrawable",
			Handler:    _Query_Withdrawable_Handler,
		},
		{
			MethodName: "TotalWithdraw",
			Handler:    _Query_TotalWithdraw_Handler,
		},
		{
			MethodName: "TotalClaimed",
			Handler:    _Query_TotalClaimed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qbank/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDenomDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDenomDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDenomDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserClaimRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserClaimRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserClaimRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserClaimRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserClaimRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserClaimRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAccount) > 0 {
		i -= len(m.UserAccount)
		copy(dAtA[i:], m.UserAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawableResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawableResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultID) > 0 {
		i -= len(m.VaultID)
		copy(dAtA[i:], m.VaultID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalClaimedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalClaimedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalClaimedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultID) > 0 {
		i -= len(m.VaultID)
		copy(dAtA[i:], m.VaultID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAcc) > 0 {
		i -= len(m.UserAcc)
		copy(dAtA[i:], m.UserAcc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAcc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalClaimedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalClaimedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalClaimedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserDenomDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDenomDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovQuery(uint64(m.Amount))
	}
	return n
}

func (m *QueryUserDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserClaimRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserClaimRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWithdrawableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawableResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VaultID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalClaimedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAcc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VaultID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalClaimedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coins.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDenomDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDenomDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDenomDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserClaimRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserClaimRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserClaimRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserClaimRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserClaimRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserClaimRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalClaimedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalClaimedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalClaimedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAcc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAcc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalClaimedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalClaimedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalClaimedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
