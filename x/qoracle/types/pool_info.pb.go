// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qoracle/pool_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	balancer "github.com/quasarlabs/quasarnode/x/intergamm/types/osmosis/v9/gamm/pool-models/balancer"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolInfo struct {
	PoolId          string         `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	Info            *balancer.Pool `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	LastUpdatedTime uint64         `protobuf:"varint,3,opt,name=lastUpdatedTime,proto3" json:"lastUpdatedTime,omitempty"`
	Creator         string         `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *PoolInfo) Reset()         { *m = PoolInfo{} }
func (m *PoolInfo) String() string { return proto.CompactTextString(m) }
func (*PoolInfo) ProtoMessage()    {}
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_58ae13543ed982a2, []int{0}
}
func (m *PoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfo.Merge(m, src)
}
func (m *PoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfo proto.InternalMessageInfo

func (m *PoolInfo) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *PoolInfo) GetInfo() *balancer.Pool {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PoolInfo) GetLastUpdatedTime() uint64 {
	if m != nil {
		return m.LastUpdatedTime
	}
	return 0
}

func (m *PoolInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*PoolInfo)(nil), "quasarlabs.quasarnode.qoracle.PoolInfo")
}

func init() { proto.RegisterFile("qoracle/pool_info.proto", fileDescriptor_58ae13543ed982a2) }

var fileDescriptor_58ae13543ed982a2 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x8d, 0xbf, 0x2f, 0x2a, 0x60, 0x06, 0xa4, 0x0c, 0x10, 0x55, 0xc2, 0x8a, 0x98, 0xb2, 0x60,
	0x53, 0x18, 0x10, 0x2b, 0x5b, 0x99, 0x50, 0x04, 0x0b, 0x0b, 0xba, 0x49, 0xdc, 0x12, 0xc9, 0xce,
	0x4d, 0x6d, 0xb7, 0x82, 0xb7, 0x60, 0xe2, 0x99, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x45, 0x90, 0xd3,
	0x94, 0x4a, 0x6c, 0xe7, 0x58, 0xe7, 0xc7, 0xf7, 0xd0, 0x93, 0x05, 0x1a, 0x28, 0x94, 0x14, 0x0d,
	0xa2, 0x7a, 0xae, 0xea, 0x19, 0xf2, 0xc6, 0xa0, 0xc3, 0xe8, 0x74, 0xb1, 0x04, 0x0b, 0x46, 0x41,
	0x6e, 0xf9, 0x06, 0xd6, 0x58, 0x4a, 0x3e, 0xc8, 0xc7, 0xd7, 0x68, 0x35, 0xda, 0xca, 0x8a, 0xd5,
	0x8d, 0x98, 0x83, 0xd6, 0xbd, 0xff, 0x5c, 0x63, 0x29, 0x95, 0x15, 0x39, 0x28, 0xa8, 0x0b, 0x69,
	0x7e, 0xc1, 0x3d, 0xa2, 0xda, 0xe4, 0x9e, 0x7d, 0x10, 0xba, 0xef, 0xe9, 0xb4, 0x9e, 0x61, 0x74,
	0x4c, 0x47, 0xde, 0x37, 0x2d, 0x63, 0x92, 0x90, 0xf4, 0x20, 0x1b, 0x58, 0xc4, 0x69, 0xe8, 0xbf,
	0x12, 0xff, 0x4b, 0x48, 0x7a, 0x78, 0x39, 0xe6, 0x43, 0x19, 0xf7, 0x4d, 0x7c, 0x35, 0xc9, 0xa5,
	0x83, 0x09, 0xf7, 0x29, 0x59, 0xaf, 0x8b, 0x52, 0x7a, 0xa4, 0xc0, 0xba, 0xc7, 0xa6, 0x04, 0x27,
	0xcb, 0x87, 0x4a, 0xcb, 0xf8, 0x7f, 0x42, 0xd2, 0x30, 0xfb, 0xfb, 0x1c, 0xc5, 0x74, 0xaf, 0x30,
	0x12, 0x1c, 0x9a, 0x38, 0xec, 0x2b, 0xb7, 0xf4, 0xf6, 0xee, 0xb3, 0x65, 0x64, 0xdd, 0x32, 0xf2,
	0xdd, 0x32, 0xf2, 0xde, 0xb1, 0x60, 0xdd, 0xb1, 0xe0, 0xab, 0x63, 0xc1, 0xd3, 0xc5, 0xbc, 0x72,
	0x2f, 0xcb, 0x9c, 0x17, 0xa8, 0xc5, 0x6e, 0x15, 0xb1, 0x5b, 0x45, 0xbc, 0x8a, 0xed, 0x8c, 0xee,
	0xad, 0x91, 0x36, 0x1f, 0xf5, 0xb7, 0x5e, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x98, 0x2e, 0x0a,
	0x09, 0x5e, 0x01, 0x00, 0x00,
}

func (m *PoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPoolInfo(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.LastUpdatedTime != 0 {
		i = encodeVarintPoolInfo(dAtA, i, uint64(m.LastUpdatedTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPoolInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintPoolInfo(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovPoolInfo(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovPoolInfo(uint64(l))
	}
	if m.LastUpdatedTime != 0 {
		n += 1 + sovPoolInfo(uint64(m.LastUpdatedTime))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPoolInfo(uint64(l))
	}
	return n
}

func sovPoolInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolInfo(x uint64) (n int) {
	return sovPoolInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &balancer.Pool{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			m.LastUpdatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolInfo = fmt.Errorf("proto: unexpected end of group")
)
