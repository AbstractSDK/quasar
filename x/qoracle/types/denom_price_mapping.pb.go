// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qoracle/denom_price_mapping.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DenomPriceMapping struct {
	Denom       string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	OracleDenom string                                 `protobuf:"bytes,2,opt,name=oracle_denom,json=oracleDenom,proto3" json:"oracle_denom,omitempty"`
	Multiplier  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=multiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multiplier"`
}

func (m *DenomPriceMapping) Reset()         { *m = DenomPriceMapping{} }
func (m *DenomPriceMapping) String() string { return proto.CompactTextString(m) }
func (*DenomPriceMapping) ProtoMessage()    {}
func (*DenomPriceMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_562c166561c7d253, []int{0}
}
func (m *DenomPriceMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomPriceMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomPriceMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomPriceMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomPriceMapping.Merge(m, src)
}
func (m *DenomPriceMapping) XXX_Size() int {
	return m.Size()
}
func (m *DenomPriceMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomPriceMapping.DiscardUnknown(m)
}

var xxx_messageInfo_DenomPriceMapping proto.InternalMessageInfo

func (m *DenomPriceMapping) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomPriceMapping) GetOracleDenom() string {
	if m != nil {
		return m.OracleDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*DenomPriceMapping)(nil), "abag.quasarnode.qoracle.DenomPriceMapping")
}

func init() { proto.RegisterFile("qoracle/denom_price_mapping.proto", fileDescriptor_562c166561c7d253) }

var fileDescriptor_562c166561c7d253 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x77, 0x15, 0x05, 0xa3, 0x97, 0x2e, 0x05, 0x6b, 0x0f, 0xa9, 0xf5, 0x20, 0x22, 0x98,
	0xa1, 0xf8, 0x06, 0xa5, 0x57, 0x45, 0x7a, 0xf4, 0x52, 0x92, 0x34, 0xc6, 0xe0, 0xee, 0x4e, 0xba,
	0xd9, 0x15, 0xfb, 0x16, 0x3e, 0x80, 0x0f, 0xd4, 0x63, 0x8f, 0xe2, 0xa1, 0x48, 0xf7, 0x45, 0x64,
	0x93, 0x2d, 0xf6, 0x94, 0xcc, 0xfc, 0xff, 0xfc, 0x7c, 0x33, 0x64, 0xb8, 0xc0, 0x82, 0xcb, 0x54,
	0xc1, 0x5c, 0xe5, 0x98, 0xcd, 0x6c, 0x61, 0xa4, 0x9a, 0x65, 0xdc, 0x5a, 0x93, 0x6b, 0x66, 0x0b,
	0x2c, 0x31, 0x39, 0xe7, 0x82, 0x6b, 0xb6, 0xa8, 0xb8, 0xe3, 0x45, 0x8e, 0x73, 0xc5, 0xda, 0x91,
	0x7e, 0x57, 0xa3, 0x46, 0xef, 0x81, 0xe6, 0x17, 0xec, 0xfd, 0x0b, 0x8d, 0xa8, 0x53, 0x05, 0xbe,
	0x12, 0xd5, 0x0b, 0xf0, 0x7c, 0xd9, 0x4a, 0x54, 0xa2, 0xcb, 0xd0, 0x81, 0xe0, 0x4e, 0xc1, 0xfb,
	0x48, 0xa8, 0x92, 0x8f, 0x40, 0xa2, 0xc9, 0x5b, 0xbd, 0xb3, 0x83, 0x31, 0x42, 0x86, 0xd6, 0xd5,
	0x57, 0x4c, 0x3a, 0x93, 0x06, 0xed, 0xa9, 0x21, 0x7b, 0x08, 0x60, 0x49, 0x97, 0x1c, 0x79, 0xde,
	0x5e, 0x7c, 0x19, 0xdf, 0x9c, 0x4c, 0x43, 0x91, 0x0c, 0xc9, 0x59, 0x98, 0x9f, 0x05, 0xf1, 0xc0,
	0x8b, 0xa7, 0xa1, 0xe7, 0x43, 0x92, 0x47, 0x42, 0xb2, 0x2a, 0x2d, 0x8d, 0x4d, 0x8d, 0x2a, 0x7a,
	0x87, 0x8d, 0x61, 0xcc, 0x56, 0x9b, 0x41, 0xf4, 0xb3, 0x19, 0x5c, 0x6b, 0x53, 0xbe, 0x56, 0x82,
	0x49, 0xcc, 0xa0, 0x05, 0x0d, 0xcf, 0x9d, 0x9b, 0xbf, 0x41, 0xb9, 0xb4, 0xca, 0xb1, 0x89, 0x92,
	0xd3, 0xbd, 0x84, 0xf1, 0x64, 0xb5, 0xa5, 0xf1, 0x7a, 0x4b, 0xe3, 0xdf, 0x2d, 0x8d, 0x3f, 0x6b,
	0x1a, 0xad, 0x6b, 0x1a, 0x7d, 0xd7, 0x34, 0x7a, 0xbe, 0xdd, 0x4b, 0x6b, 0x0e, 0x08, 0xff, 0x07,
	0x84, 0x0f, 0xd8, 0x2d, 0xea, 0x53, 0xc5, 0xb1, 0xdf, 0xf5, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0xb5, 0x45, 0xc4, 0x8d, 0x01, 0x00, 0x00,
}

func (m *DenomPriceMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomPriceMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomPriceMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDenomPriceMapping(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OracleDenom) > 0 {
		i -= len(m.OracleDenom)
		copy(dAtA[i:], m.OracleDenom)
		i = encodeVarintDenomPriceMapping(dAtA, i, uint64(len(m.OracleDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDenomPriceMapping(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDenomPriceMapping(dAtA []byte, offset int, v uint64) int {
	offset -= sovDenomPriceMapping(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DenomPriceMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDenomPriceMapping(uint64(l))
	}
	l = len(m.OracleDenom)
	if l > 0 {
		n += 1 + l + sovDenomPriceMapping(uint64(l))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovDenomPriceMapping(uint64(l))
	return n
}

func sovDenomPriceMapping(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDenomPriceMapping(x uint64) (n int) {
	return sovDenomPriceMapping(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DenomPriceMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomPriceMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomPriceMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomPriceMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomPriceMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomPriceMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomPriceMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomPriceMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomPriceMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomPriceMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomPriceMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomPriceMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomPriceMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDenomPriceMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomPriceMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDenomPriceMapping(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDenomPriceMapping
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenomPriceMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenomPriceMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDenomPriceMapping
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDenomPriceMapping
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDenomPriceMapping
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDenomPriceMapping        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDenomPriceMapping          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDenomPriceMapping = fmt.Errorf("proto: unexpected end of group")
)
