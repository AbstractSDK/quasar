// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intergamm/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ZoneRouteInfo struct {
	// zone ID: a unique ID for source zone of this route
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty" yaml:"zone_id",  json:"zone_id"`
	// chain ID of the source zone
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id", json:"chain_id"`
	// counterparty zone ID: a unique ID for destination zone of this route
	CounterpartyZoneId string `protobuf:"bytes,3,opt,name=counterparty_zone_id,json=counterpartyZoneId,proto3" json:"counterparty_zone_id,omitempty" yaml:"counterparty_zone_id",  json:"counterparty_zone_id"`
	// chain ID of the destination zone
	CounterpartyChainId string `protobuf:"bytes,4,opt,name=counterparty_chain_id,json=counterpartyChainId,proto3" json:"counterparty_chain_id,omitempty" yaml:"counterparty_chain_id", json:"counterparty_chain_id"`
	// IBC connection ID from source to destination
	ConnectionId string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" yaml:"connection_id", json:"connection_id"`
	// IBC port ID from source to destination (usually 'transfer')
	PortId string `protobuf:"bytes,6,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id", json:"port_id"`
	// IBC channel ID from source to destination
	ChannelId string `protobuf:"bytes,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty" yaml:"channel_id", json:"channel_id"`
	// IBC counterparty connection ID from destination to source
	CounterpartyConnectionId string `protobuf:"bytes,8,opt,name=counterparty_connection_id,json=counterpartyConnectionId,proto3" json:"counterparty_connection_id,omitempty" yaml:"counterparty_connection_id", json:"counterparty_connection_id"`
	// IBC counterparty port ID from destination to source (usually 'transfer')
	CounterpartyPortId string `protobuf:"bytes,9,opt,name=counterparty_port_id,json=counterpartyPortId,proto3" json:"counterparty_port_id,omitempty" yaml:"counterparty_port_id", json:"counterparty_port_id"`
	// IBC counterparty channel ID from destination to source
	CounterpartyChannelId string `protobuf:"bytes,10,opt,name=counterparty_channel_id,json=counterpartyChannelId,proto3" json:"counterparty_channel_id,omitempty" yaml:"counterparty_channel_id", json:"counterparty_channel_id"`
}

func (m *ZoneRouteInfo) Reset()         { *m = ZoneRouteInfo{} }
func (m *ZoneRouteInfo) String() string { return proto.CompactTextString(m) }
func (*ZoneRouteInfo) ProtoMessage()    {}
func (*ZoneRouteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8141babea2094d3b, []int{0}
}
func (m *ZoneRouteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneRouteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneRouteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneRouteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneRouteInfo.Merge(m, src)
}
func (m *ZoneRouteInfo) XXX_Size() int {
	return m.Size()
}
func (m *ZoneRouteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneRouteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneRouteInfo proto.InternalMessageInfo

func (m *ZoneRouteInfo) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

func (m *ZoneRouteInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ZoneRouteInfo) GetCounterpartyZoneId() string {
	if m != nil {
		return m.CounterpartyZoneId
	}
	return ""
}

func (m *ZoneRouteInfo) GetCounterpartyChainId() string {
	if m != nil {
		return m.CounterpartyChainId
	}
	return ""
}

func (m *ZoneRouteInfo) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *ZoneRouteInfo) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *ZoneRouteInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ZoneRouteInfo) GetCounterpartyConnectionId() string {
	if m != nil {
		return m.CounterpartyConnectionId
	}
	return ""
}

func (m *ZoneRouteInfo) GetCounterpartyPortId() string {
	if m != nil {
		return m.CounterpartyPortId
	}
	return ""
}

func (m *ZoneRouteInfo) GetCounterpartyChannelId() string {
	if m != nil {
		return m.CounterpartyChannelId
	}
	return ""
}

// IntermediateReceiver
type ZoneCompleteInfo struct {
	ZoneRouteInfo     ZoneRouteInfo            `protobuf:"bytes,1,opt,name=zone_route_info,json=zoneRouteInfo,proto3" json:"zone_route_info" yaml:"zone_route_info",json:"zone_route_info"`
	InterchainAddress string                   `protobuf:"bytes,2,opt,name=interchain_address,json=interchainAddress,proto3" json:"interchain_address,omitempty" yaml:"interchain_address",json:"interchain_address"`
	NextZoneRouteMap  map[string]ZoneRouteInfo `protobuf:"bytes,3,rep,name=next_zone_route_map,json=nextZoneRouteMap,proto3" json:"next_zone_route_map" yaml:"next_zone_route_map",json:"next_zone_route_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ZoneCompleteInfo) Reset()         { *m = ZoneCompleteInfo{} }
func (m *ZoneCompleteInfo) String() string { return proto.CompactTextString(m) }
func (*ZoneCompleteInfo) ProtoMessage()    {}
func (*ZoneCompleteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8141babea2094d3b, []int{1}
}
func (m *ZoneCompleteInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZoneCompleteInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZoneCompleteInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZoneCompleteInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZoneCompleteInfo.Merge(m, src)
}
func (m *ZoneCompleteInfo) XXX_Size() int {
	return m.Size()
}
func (m *ZoneCompleteInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ZoneCompleteInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ZoneCompleteInfo proto.InternalMessageInfo

func (m *ZoneCompleteInfo) GetZoneRouteInfo() ZoneRouteInfo {
	if m != nil {
		return m.ZoneRouteInfo
	}
	return ZoneRouteInfo{}
}

func (m *ZoneCompleteInfo) GetInterchainAddress() string {
	if m != nil {
		return m.InterchainAddress
	}
	return ""
}

func (m *ZoneCompleteInfo) GetNextZoneRouteMap() map[string]ZoneRouteInfo {
	if m != nil {
		return m.NextZoneRouteMap
	}
	return nil
}

// Params defines the parameters for the module.
type Params struct {
	DenomToNativeZoneIdMap map[string]string           `protobuf:"bytes,1,rep,name=denom_to_native_zone_id_map,json=denomToNativeZoneIdMap,proto3" json:"denom_to_native_zone_id_map" yaml:"denom_to_native_zone_id_map",json:"denom_to_native_zone_id_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CompleteZoneInfoMap    map[string]ZoneCompleteInfo `protobuf:"bytes,2,rep,name=complete_zone_info_map,json=completeZoneInfoMap,proto3" json:"complete_zone_info_map" yaml:"complete_zone_info_map",json:"complete_zone_info_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8141babea2094d3b, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDenomToNativeZoneIdMap() map[string]string {
	if m != nil {
		return m.DenomToNativeZoneIdMap
	}
	return nil
}

func (m *Params) GetCompleteZoneInfoMap() map[string]ZoneCompleteInfo {
	if m != nil {
		return m.CompleteZoneInfoMap
	}
	return nil
}

func init() {
	proto.RegisterType((*ZoneRouteInfo)(nil), "quasarlabs.quasarnode.intergamm.ZoneRouteInfo")
	proto.RegisterType((*ZoneCompleteInfo)(nil), "quasarlabs.quasarnode.intergamm.ZoneCompleteInfo")
	proto.RegisterMapType((map[string]ZoneRouteInfo)(nil), "quasarlabs.quasarnode.intergamm.ZoneCompleteInfo.NextZoneRouteMapEntry")
	proto.RegisterType((*Params)(nil), "quasarlabs.quasarnode.intergamm.Params")
	proto.RegisterMapType((map[string]ZoneCompleteInfo)(nil), "quasarlabs.quasarnode.intergamm.Params.CompleteZoneInfoMapEntry")
	proto.RegisterMapType((map[string]string)(nil), "quasarlabs.quasarnode.intergamm.Params.DenomToNativeZoneIdMapEntry")
}

func init() { proto.RegisterFile("intergamm/params.proto", fileDescriptor_8141babea2094d3b) }

var fileDescriptor_8141babea2094d3b = []byte{
	// 855 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcb, 0x4e, 0x23, 0x47,
	0x14, 0x75, 0x63, 0x63, 0xe3, 0x22, 0x28, 0xa4, 0x79, 0xc4, 0x32, 0x92, 0xcb, 0x72, 0x58, 0xa0,
	0x88, 0xb4, 0x15, 0x10, 0x0a, 0x31, 0x8f, 0x24, 0x36, 0x88, 0x58, 0x0a, 0x08, 0x55, 0xb2, 0x62,
	0x63, 0x35, 0xee, 0xb2, 0x71, 0xe2, 0xae, 0xea, 0x74, 0xb7, 0x11, 0xe6, 0x03, 0xb2, 0x8b, 0x94,
	0x65, 0x96, 0xfc, 0xc4, 0x6c, 0x46, 0x9a, 0x3d, 0xb3, 0x1a, 0x96, 0xb3, 0x6a, 0x8d, 0x60, 0x31,
	0xb3, 0xee, 0x2f, 0x18, 0x75, 0x55, 0x3f, 0xed, 0x32, 0x8f, 0x5d, 0xf5, 0x7d, 0x9c, 0x73, 0xef,
	0xa9, 0x5b, 0xd7, 0x06, 0xcb, 0x3d, 0x62, 0x63, 0xb3, 0xab, 0xea, 0x7a, 0xd5, 0x50, 0x4d, 0x55,
	0xb7, 0x14, 0xc3, 0xa4, 0x36, 0x95, 0xe1, 0xdf, 0x03, 0xd5, 0x52, 0xcd, 0xbe, 0x7a, 0x6e, 0x29,
	0xfc, 0x48, 0xa8, 0x86, 0x95, 0x30, 0xba, 0xb8, 0xd8, 0xa5, 0x5d, 0xca, 0x62, 0xab, 0xde, 0x89,
	0xa7, 0x55, 0xde, 0xe6, 0xc0, 0xdc, 0x19, 0x25, 0x18, 0xd1, 0x81, 0x8d, 0x9b, 0xa4, 0x43, 0xe5,
	0x5d, 0x90, 0xbb, 0xa6, 0x04, 0xb7, 0x7a, 0x5a, 0x41, 0x2a, 0x4b, 0x6b, 0xf9, 0xfa, 0x37, 0xae,
	0x03, 0xe1, 0x50, 0xd5, 0xfb, 0xb5, 0x8a, 0xef, 0xa8, 0xac, 0x97, 0xcb, 0x7f, 0x5a, 0x94, 0x44,
	0x06, 0x94, 0xf5, 0x4e, 0x4d, 0x4d, 0xfe, 0x09, 0xcc, 0xb4, 0x2f, 0xd4, 0x1e, 0xf1, 0xd2, 0xa7,
	0x58, 0xfa, 0xaa, 0xeb, 0xc0, 0x32, 0x4f, 0x0f, 0x3c, 0x95, 0x75, 0x3f, 0x3d, 0x34, 0xa0, 0x1c,
	0x3b, 0x36, 0x35, 0x99, 0x82, 0xc5, 0x36, 0x1d, 0x78, 0x55, 0x1b, 0xaa, 0x69, 0x0f, 0x5b, 0x41,
	0x2d, 0x69, 0x06, 0xb6, 0xe7, 0x3a, 0xf0, 0x47, 0x1f, 0x4c, 0x10, 0x15, 0x15, 0x26, 0xf4, 0x22,
	0x39, 0x6e, 0x3e, 0xe3, 0x15, 0x9b, 0x60, 0x29, 0x11, 0x1c, 0x96, 0x9f, 0x61, 0x8c, 0xfb, 0xae,
	0x03, 0x6b, 0x02, 0xc6, 0xf1, 0x5e, 0x84, 0x5e, 0xb4, 0x10, 0xb7, 0x37, 0xfc, 0x26, 0x7f, 0x07,
	0x73, 0x6d, 0x4a, 0x08, 0x6e, 0xdb, 0x3d, 0xca, 0xb8, 0xa6, 0x19, 0x97, 0xe2, 0x3a, 0xf0, 0xdb,
	0x80, 0x2b, 0xe6, 0x8e, 0x71, 0xc4, 0xad, 0xe8, 0x8b, 0xe8, 0xbb, 0xa9, 0xc9, 0x3b, 0x20, 0x67,
	0x50, 0xd3, 0xf6, 0xe0, 0xb2, 0x0c, 0xae, 0xe2, 0x3a, 0xb0, 0xc4, 0xe1, 0x7c, 0x47, 0x08, 0x14,
	0x7c, 0xa3, 0xac, 0x77, 0x6a, 0x6a, 0xf2, 0x11, 0x00, 0xed, 0x0b, 0x95, 0x10, 0xdc, 0xf7, 0xf2,
	0x73, 0x2c, 0x7f, 0xcd, 0x75, 0xe0, 0x6a, 0x78, 0x73, 0xbe, 0x2f, 0x7e, 0x77, 0x81, 0x09, 0xe5,
	0xfd, 0x8f, 0xa6, 0x26, 0xff, 0x23, 0x81, 0x62, 0x52, 0x8a, 0x44, 0xa3, 0x33, 0x0c, 0xf9, 0x57,
	0xd7, 0x81, 0x07, 0x22, 0x51, 0x27, 0x74, 0x3d, 0x31, 0x04, 0x15, 0x12, 0xf2, 0xc6, 0xe5, 0x20,
	0x23, 0x83, 0x14, 0x68, 0x93, 0x67, 0x15, 0xec, 0xba, 0x0e, 0xdc, 0x16, 0x54, 0x30, 0x2a, 0x94,
	0xd0, 0x99, 0x9c, 0xa3, 0x53, 0xae, 0xe0, 0x35, 0xf8, 0x7a, 0x74, 0x04, 0x02, 0x39, 0x01, 0xa3,
	0xac, 0xbb, 0x0e, 0xdc, 0x17, 0x4f, 0xd2, 0x98, 0xb6, 0x13, 0xfc, 0x68, 0x69, 0x64, 0x9a, 0xb8,
	0xe8, 0xb5, 0xcc, 0xa7, 0x1b, 0x28, 0x55, 0xde, 0x64, 0xc0, 0xbc, 0x37, 0xd4, 0x0d, 0xaa, 0x1b,
	0x7d, 0xec, 0x3f, 0xe7, 0x7f, 0x25, 0xf0, 0x25, 0x9b, 0x7f, 0xd3, 0x7b, 0xe1, 0xad, 0x1e, 0xe9,
	0x50, 0xf6, 0xae, 0x67, 0x37, 0x14, 0xe5, 0x89, 0x95, 0xa1, 0x24, 0x16, 0x43, 0x7d, 0xeb, 0xd6,
	0x81, 0x29, 0xd7, 0x81, 0xdf, 0xc5, 0x76, 0x41, 0x04, 0x5a, 0x59, 0x8f, 0x6d, 0x84, 0x98, 0x19,
	0xcd, 0x5d, 0x27, 0xd6, 0x4b, 0x07, 0xc8, 0x8c, 0x80, 0xbf, 0x10, 0x55, 0xd3, 0x4c, 0x6c, 0x59,
	0xfe, 0xaa, 0xf8, 0xc1, 0x75, 0xe0, 0x26, 0x47, 0x1f, 0x8f, 0x09, 0x08, 0x04, 0x1e, 0xf4, 0x55,
	0x64, 0xfc, 0x85, 0xdb, 0xe4, 0x57, 0x12, 0x58, 0x20, 0xf8, 0xca, 0x6e, 0xc5, 0x0a, 0xd2, 0x55,
	0xa3, 0x90, 0x2e, 0xa7, 0xd7, 0x66, 0x37, 0x8e, 0x9e, 0xd5, 0x7b, 0x5c, 0x48, 0xe5, 0x04, 0x5f,
	0xd9, 0xa1, 0x20, 0xc7, 0xaa, 0x71, 0x48, 0x6c, 0x73, 0x58, 0xdf, 0xf3, 0x45, 0xd9, 0xe2, 0x65,
	0x0b, 0x18, 0x83, 0xba, 0x45, 0x2e, 0x34, 0x4f, 0x46, 0x50, 0x8b, 0x16, 0x58, 0x12, 0x32, 0xc9,
	0xf3, 0x20, 0xfd, 0x17, 0x1e, 0xf2, 0x9d, 0x8c, 0xbc, 0xa3, 0x7c, 0x00, 0xa6, 0x2f, 0xd5, 0xfe,
	0x00, 0x33, 0xf5, 0x5e, 0x7c, 0x9f, 0x88, 0x27, 0xd7, 0xa6, 0xb6, 0x25, 0x7f, 0x7e, 0x3e, 0x66,
	0x40, 0xf6, 0x94, 0xfd, 0xa6, 0xc8, 0xef, 0x24, 0xb0, 0xa2, 0x61, 0x42, 0xf5, 0x96, 0x4d, 0x5b,
	0x44, 0xb5, 0x7b, 0x97, 0x38, 0xd8, 0xa2, 0x4c, 0x45, 0x89, 0xa9, 0xd8, 0x78, 0x92, 0x91, 0xc3,
	0x29, 0x07, 0x1e, 0xd4, 0x1f, 0xf4, 0x84, 0x01, 0xf1, 0xbd, 0x1b, 0x2a, 0x78, 0xec, 0x2b, 0x78,
	0xc8, 0x15, 0x7c, 0x84, 0x35, 0x50, 0xf2, 0xb1, 0x10, 0xb4, 0xac, 0x09, 0xb9, 0xe4, 0xd7, 0x12,
	0x58, 0x6e, 0xfb, 0xf7, 0xe9, 0x67, 0x90, 0x0e, 0x65, 0xcd, 0x4c, 0xb1, 0x66, 0x7e, 0x7e, 0x6e,
	0x33, 0xc1, 0x54, 0x30, 0x6c, 0xd2, 0xa1, 0x61, 0x27, 0x0d, 0xbf, 0x93, 0x9d, 0xe0, 0x91, 0x8b,
	0xd8, 0x82, 0x26, 0x26, 0x78, 0xbd, 0xdf, 0x8b, 0x31, 0xf8, 0x62, 0x13, 0xac, 0x3c, 0x22, 0xa1,
	0x60, 0x34, 0x16, 0xe3, 0xa3, 0x91, 0x8f, 0x5d, 0x75, 0x71, 0x08, 0x0a, 0x93, 0x1a, 0x10, 0xe0,
	0x1c, 0x25, 0x47, 0xec, 0xfb, 0x17, 0x3f, 0x9b, 0xf8, 0x94, 0xcd, 0xfc, 0x7f, 0x03, 0x53, 0xde,
	0xa4, 0xd5, 0x7f, 0xbb, 0xbd, 0x2f, 0x49, 0x77, 0xf7, 0x25, 0xe9, 0xc3, 0x7d, 0x49, 0xfa, 0xef,
	0xa1, 0x94, 0xba, 0x7b, 0x28, 0xa5, 0xde, 0x3f, 0x94, 0x52, 0x67, 0x1b, 0xdd, 0x9e, 0x7d, 0x31,
	0x38, 0x57, 0xda, 0x54, 0xaf, 0x46, 0x5c, 0xd5, 0x88, 0xab, 0x7a, 0x55, 0x8d, 0xfe, 0x01, 0xd9,
	0x43, 0x03, 0x5b, 0xe7, 0x59, 0xf6, 0x57, 0x66, 0xf3, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9,
	0x4b, 0x1d, 0x15, 0x1b, 0x09, 0x00, 0x00,
}

func (this *ZoneRouteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZoneRouteInfo)
	if !ok {
		that2, ok := that.(ZoneRouteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ZoneId != that1.ZoneId {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.CounterpartyZoneId != that1.CounterpartyZoneId {
		return false
	}
	if this.CounterpartyChainId != that1.CounterpartyChainId {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.PortId != that1.PortId {
		return false
	}
	if this.ChannelId != that1.ChannelId {
		return false
	}
	if this.CounterpartyConnectionId != that1.CounterpartyConnectionId {
		return false
	}
	if this.CounterpartyPortId != that1.CounterpartyPortId {
		return false
	}
	if this.CounterpartyChannelId != that1.CounterpartyChannelId {
		return false
	}
	return true
}
func (this *ZoneCompleteInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ZoneCompleteInfo)
	if !ok {
		that2, ok := that.(ZoneCompleteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ZoneRouteInfo.Equal(&that1.ZoneRouteInfo) {
		return false
	}
	if this.InterchainAddress != that1.InterchainAddress {
		return false
	}
	if len(this.NextZoneRouteMap) != len(that1.NextZoneRouteMap) {
		return false
	}
	for i := range this.NextZoneRouteMap {
		a := this.NextZoneRouteMap[i]
		b := that1.NextZoneRouteMap[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DenomToNativeZoneIdMap) != len(that1.DenomToNativeZoneIdMap) {
		return false
	}
	for i := range this.DenomToNativeZoneIdMap {
		if this.DenomToNativeZoneIdMap[i] != that1.DenomToNativeZoneIdMap[i] {
			return false
		}
	}
	if len(this.CompleteZoneInfoMap) != len(that1.CompleteZoneInfoMap) {
		return false
	}
	for i := range this.CompleteZoneInfoMap {
		a := this.CompleteZoneInfoMap[i]
		b := that1.CompleteZoneInfoMap[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (m *ZoneRouteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneRouteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneRouteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyChannelId) > 0 {
		i -= len(m.CounterpartyChannelId)
		copy(dAtA[i:], m.CounterpartyChannelId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CounterpartyChannelId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CounterpartyPortId) > 0 {
		i -= len(m.CounterpartyPortId)
		copy(dAtA[i:], m.CounterpartyPortId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CounterpartyPortId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CounterpartyConnectionId) > 0 {
		i -= len(m.CounterpartyConnectionId)
		copy(dAtA[i:], m.CounterpartyConnectionId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CounterpartyConnectionId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CounterpartyChainId) > 0 {
		i -= len(m.CounterpartyChainId)
		copy(dAtA[i:], m.CounterpartyChainId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CounterpartyChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CounterpartyZoneId) > 0 {
		i -= len(m.CounterpartyZoneId)
		copy(dAtA[i:], m.CounterpartyZoneId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CounterpartyZoneId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZoneId) > 0 {
		i -= len(m.ZoneId)
		copy(dAtA[i:], m.ZoneId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ZoneId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZoneCompleteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZoneCompleteInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZoneCompleteInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextZoneRouteMap) > 0 {
		for k := range m.NextZoneRouteMap {
			v := m.NextZoneRouteMap[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InterchainAddress) > 0 {
		i -= len(m.InterchainAddress)
		copy(dAtA[i:], m.InterchainAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.InterchainAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ZoneRouteInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompleteZoneInfoMap) > 0 {
		for k := range m.CompleteZoneInfoMap {
			v := m.CompleteZoneInfoMap[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DenomToNativeZoneIdMap) > 0 {
		for k := range m.DenomToNativeZoneIdMap {
			v := m.DenomToNativeZoneIdMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintParams(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZoneRouteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ZoneId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.CounterpartyZoneId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.CounterpartyChainId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.CounterpartyConnectionId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.CounterpartyPortId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.CounterpartyChannelId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *ZoneCompleteInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ZoneRouteInfo.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.InterchainAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.NextZoneRouteMap) > 0 {
		for k, v := range m.NextZoneRouteMap {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + 1 + l + sovParams(uint64(l))
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomToNativeZoneIdMap) > 0 {
		for k, v := range m.DenomToNativeZoneIdMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + 1 + len(v) + sovParams(uint64(len(v)))
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	if len(m.CompleteZoneInfoMap) > 0 {
		for k, v := range m.CompleteZoneInfoMap {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + 1 + l + sovParams(uint64(l))
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZoneRouteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneRouteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneRouteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyPortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyPortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZoneCompleteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZoneCompleteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZoneCompleteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneRouteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZoneRouteInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextZoneRouteMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextZoneRouteMap == nil {
				m.NextZoneRouteMap = make(map[string]ZoneRouteInfo)
			}
			var mapkey string
			mapvalue := &ZoneRouteInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthParams
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthParams
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ZoneRouteInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NextZoneRouteMap[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomToNativeZoneIdMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomToNativeZoneIdMap == nil {
				m.DenomToNativeZoneIdMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DenomToNativeZoneIdMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteZoneInfoMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompleteZoneInfoMap == nil {
				m.CompleteZoneInfoMap = make(map[string]ZoneCompleteInfo)
			}
			var mapkey string
			mapvalue := &ZoneCompleteInfo{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthParams
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthParams
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ZoneCompleteInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CompleteZoneInfoMap[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
