// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: intergamm/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgEmptyIbcResponse struct {
}

func (m *MsgEmptyIbcResponse) Reset()         { *m = MsgEmptyIbcResponse{} }
func (m *MsgEmptyIbcResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEmptyIbcResponse) ProtoMessage()    {}
func (*MsgEmptyIbcResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{0}
}
func (m *MsgEmptyIbcResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEmptyIbcResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEmptyIbcResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEmptyIbcResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEmptyIbcResponse.Merge(m, src)
}
func (m *MsgEmptyIbcResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEmptyIbcResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEmptyIbcResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEmptyIbcResponse proto.InternalMessageInfo

type MsgTestScenario struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Scenario string `protobuf:"bytes,2,opt,name=scenario,proto3" json:"scenario,omitempty"`
}

func (m *MsgTestScenario) Reset()         { *m = MsgTestScenario{} }
func (m *MsgTestScenario) String() string { return proto.CompactTextString(m) }
func (*MsgTestScenario) ProtoMessage()    {}
func (*MsgTestScenario) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{1}
}
func (m *MsgTestScenario) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTestScenario) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTestScenario.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTestScenario) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTestScenario.Merge(m, src)
}
func (m *MsgTestScenario) XXX_Size() int {
	return m.Size()
}
func (m *MsgTestScenario) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTestScenario.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTestScenario proto.InternalMessageInfo

func (m *MsgTestScenario) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTestScenario) GetScenario() string {
	if m != nil {
		return m.Scenario
	}
	return ""
}

type MsgTestScenarioResponse struct {
	Result   string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ExitCode int64  `protobuf:"varint,2,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
}

func (m *MsgTestScenarioResponse) Reset()         { *m = MsgTestScenarioResponse{} }
func (m *MsgTestScenarioResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTestScenarioResponse) ProtoMessage()    {}
func (*MsgTestScenarioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{2}
}
func (m *MsgTestScenarioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTestScenarioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTestScenarioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTestScenarioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTestScenarioResponse.Merge(m, src)
}
func (m *MsgTestScenarioResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTestScenarioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTestScenarioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTestScenarioResponse proto.InternalMessageInfo

func (m *MsgTestScenarioResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *MsgTestScenarioResponse) GetExitCode() int64 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type MsgSendToken struct {
	Creator                string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DestinationLocalZoneId string      `protobuf:"bytes,2,opt,name=destinationLocalZoneId,proto3" json:"destinationLocalZoneId,omitempty"`
	Sender                 string      `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver               string      `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Coin                   *types.Coin `protobuf:"bytes,5,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *MsgSendToken) Reset()         { *m = MsgSendToken{} }
func (m *MsgSendToken) String() string { return proto.CompactTextString(m) }
func (*MsgSendToken) ProtoMessage()    {}
func (*MsgSendToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{3}
}
func (m *MsgSendToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToken.Merge(m, src)
}
func (m *MsgSendToken) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToken) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToken.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToken proto.InternalMessageInfo

func (m *MsgSendToken) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendToken) GetDestinationLocalZoneId() string {
	if m != nil {
		return m.DestinationLocalZoneId
	}
	return ""
}

func (m *MsgSendToken) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToken) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgSendToken) GetCoin() *types.Coin {
	if m != nil {
		return m.Coin
	}
	return nil
}

type MsgSendTokenResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *MsgSendTokenResponse) Reset()         { *m = MsgSendTokenResponse{} }
func (m *MsgSendTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendTokenResponse) ProtoMessage()    {}
func (*MsgSendTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{4}
}
func (m *MsgSendTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendTokenResponse.Merge(m, src)
}
func (m *MsgSendTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendTokenResponse proto.InternalMessageInfo

func (m *MsgSendTokenResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type MsgTransmitIbcJoinPool struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionId     string       `protobuf:"bytes,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	PoolId           uint64       `protobuf:"varint,4,opt,name=poolId,proto3" json:"poolId,omitempty"`
	ShareOutAmount   int64        `protobuf:"varint,5,opt,name=shareOutAmount,proto3" json:"shareOutAmount,omitempty"`
	TokenInMaxs      []types.Coin `protobuf:"bytes,6,rep,name=tokenInMaxs,proto3" json:"tokenInMaxs"`
}

func (m *MsgTransmitIbcJoinPool) Reset()         { *m = MsgTransmitIbcJoinPool{} }
func (m *MsgTransmitIbcJoinPool) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcJoinPool) ProtoMessage()    {}
func (*MsgTransmitIbcJoinPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{5}
}
func (m *MsgTransmitIbcJoinPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcJoinPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcJoinPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcJoinPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcJoinPool.Merge(m, src)
}
func (m *MsgTransmitIbcJoinPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcJoinPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcJoinPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcJoinPool proto.InternalMessageInfo

func (m *MsgTransmitIbcJoinPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransmitIbcJoinPool) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgTransmitIbcJoinPool) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgTransmitIbcJoinPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgTransmitIbcJoinPool) GetShareOutAmount() int64 {
	if m != nil {
		return m.ShareOutAmount
	}
	return 0
}

func (m *MsgTransmitIbcJoinPool) GetTokenInMaxs() []types.Coin {
	if m != nil {
		return m.TokenInMaxs
	}
	return nil
}

type MsgTransmitIbcJoinPoolResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *MsgTransmitIbcJoinPoolResponse) Reset()         { *m = MsgTransmitIbcJoinPoolResponse{} }
func (m *MsgTransmitIbcJoinPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcJoinPoolResponse) ProtoMessage()    {}
func (*MsgTransmitIbcJoinPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{6}
}
func (m *MsgTransmitIbcJoinPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcJoinPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcJoinPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcJoinPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcJoinPoolResponse.Merge(m, src)
}
func (m *MsgTransmitIbcJoinPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcJoinPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcJoinPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcJoinPoolResponse proto.InternalMessageInfo

func (m *MsgTransmitIbcJoinPoolResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type MsgTransmitIbcExitPool struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionId     string       `protobuf:"bytes,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	PoolId           uint64       `protobuf:"varint,4,opt,name=poolId,proto3" json:"poolId,omitempty"`
	ShareInAmount    int64        `protobuf:"varint,5,opt,name=shareInAmount,proto3" json:"shareInAmount,omitempty"`
	TokenOutMins     []types.Coin `protobuf:"bytes,6,rep,name=tokenOutMins,proto3" json:"tokenOutMins"`
}

func (m *MsgTransmitIbcExitPool) Reset()         { *m = MsgTransmitIbcExitPool{} }
func (m *MsgTransmitIbcExitPool) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcExitPool) ProtoMessage()    {}
func (*MsgTransmitIbcExitPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{7}
}
func (m *MsgTransmitIbcExitPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcExitPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcExitPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcExitPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcExitPool.Merge(m, src)
}
func (m *MsgTransmitIbcExitPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcExitPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcExitPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcExitPool proto.InternalMessageInfo

func (m *MsgTransmitIbcExitPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransmitIbcExitPool) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgTransmitIbcExitPool) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgTransmitIbcExitPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgTransmitIbcExitPool) GetShareInAmount() int64 {
	if m != nil {
		return m.ShareInAmount
	}
	return 0
}

func (m *MsgTransmitIbcExitPool) GetTokenOutMins() []types.Coin {
	if m != nil {
		return m.TokenOutMins
	}
	return nil
}

type MsgTransmitIbcExitPoolResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *MsgTransmitIbcExitPoolResponse) Reset()         { *m = MsgTransmitIbcExitPoolResponse{} }
func (m *MsgTransmitIbcExitPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcExitPoolResponse) ProtoMessage()    {}
func (*MsgTransmitIbcExitPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{8}
}
func (m *MsgTransmitIbcExitPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcExitPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcExitPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcExitPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcExitPoolResponse.Merge(m, src)
}
func (m *MsgTransmitIbcExitPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcExitPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcExitPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcExitPoolResponse proto.InternalMessageInfo

func (m *MsgTransmitIbcExitPoolResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type MsgTransmitIbcLockTokens struct {
	Creator          string        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionId     string        `protobuf:"bytes,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	TimeoutTimestamp uint64        `protobuf:"varint,3,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	Duration         time.Duration `protobuf:"varint,4,opt,name=duration,proto3,stdduration" json:"duration,omitempty" yaml:"duration"`
	Coins            []types.Coin  `protobuf:"bytes,5,rep,name=coins,proto3" json:"coins"`
}

func (m *MsgTransmitIbcLockTokens) Reset()         { *m = MsgTransmitIbcLockTokens{} }
func (m *MsgTransmitIbcLockTokens) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcLockTokens) ProtoMessage()    {}
func (*MsgTransmitIbcLockTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{9}
}
func (m *MsgTransmitIbcLockTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcLockTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcLockTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcLockTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcLockTokens.Merge(m, src)
}
func (m *MsgTransmitIbcLockTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcLockTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcLockTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcLockTokens proto.InternalMessageInfo

func (m *MsgTransmitIbcLockTokens) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransmitIbcLockTokens) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgTransmitIbcLockTokens) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgTransmitIbcLockTokens) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgTransmitIbcLockTokens) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

type MsgTransmitIbcLockTokensResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *MsgTransmitIbcLockTokensResponse) Reset()         { *m = MsgTransmitIbcLockTokensResponse{} }
func (m *MsgTransmitIbcLockTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcLockTokensResponse) ProtoMessage()    {}
func (*MsgTransmitIbcLockTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{10}
}
func (m *MsgTransmitIbcLockTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcLockTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcLockTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcLockTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcLockTokensResponse.Merge(m, src)
}
func (m *MsgTransmitIbcLockTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcLockTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcLockTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcLockTokensResponse proto.InternalMessageInfo

func (m *MsgTransmitIbcLockTokensResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type MsgTransmitIbcBeginUnlocking struct {
	Creator          string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionId     string       `protobuf:"bytes,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	TimeoutTimestamp uint64       `protobuf:"varint,3,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	Id               uint64       `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Coins            []types.Coin `protobuf:"bytes,5,rep,name=coins,proto3" json:"coins"`
}

func (m *MsgTransmitIbcBeginUnlocking) Reset()         { *m = MsgTransmitIbcBeginUnlocking{} }
func (m *MsgTransmitIbcBeginUnlocking) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcBeginUnlocking) ProtoMessage()    {}
func (*MsgTransmitIbcBeginUnlocking) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{11}
}
func (m *MsgTransmitIbcBeginUnlocking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcBeginUnlocking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcBeginUnlocking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcBeginUnlocking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcBeginUnlocking.Merge(m, src)
}
func (m *MsgTransmitIbcBeginUnlocking) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcBeginUnlocking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcBeginUnlocking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcBeginUnlocking proto.InternalMessageInfo

func (m *MsgTransmitIbcBeginUnlocking) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransmitIbcBeginUnlocking) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgTransmitIbcBeginUnlocking) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgTransmitIbcBeginUnlocking) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgTransmitIbcBeginUnlocking) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

type MsgTransmitIbcBeginUnlockingResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *MsgTransmitIbcBeginUnlockingResponse) Reset()         { *m = MsgTransmitIbcBeginUnlockingResponse{} }
func (m *MsgTransmitIbcBeginUnlockingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcBeginUnlockingResponse) ProtoMessage()    {}
func (*MsgTransmitIbcBeginUnlockingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{12}
}
func (m *MsgTransmitIbcBeginUnlockingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcBeginUnlockingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcBeginUnlockingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcBeginUnlockingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcBeginUnlockingResponse.Merge(m, src)
}
func (m *MsgTransmitIbcBeginUnlockingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcBeginUnlockingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcBeginUnlockingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcBeginUnlockingResponse proto.InternalMessageInfo

func (m *MsgTransmitIbcBeginUnlockingResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type MsgTransmitIbcJoinSwapExternAmountIn struct {
	Creator           string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionId      string     `protobuf:"bytes,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	TimeoutTimestamp  uint64     `protobuf:"varint,3,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	PoolId            uint64     `protobuf:"varint,4,opt,name=poolId,proto3" json:"poolId,omitempty"`
	ShareOutMinAmount int64      `protobuf:"varint,5,opt,name=shareOutMinAmount,proto3" json:"shareOutMinAmount,omitempty"`
	TokenIn           types.Coin `protobuf:"bytes,6,opt,name=tokenIn,proto3" json:"tokenIn"`
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) Reset()         { *m = MsgTransmitIbcJoinSwapExternAmountIn{} }
func (m *MsgTransmitIbcJoinSwapExternAmountIn) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcJoinSwapExternAmountIn) ProtoMessage()    {}
func (*MsgTransmitIbcJoinSwapExternAmountIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{13}
}
func (m *MsgTransmitIbcJoinSwapExternAmountIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcJoinSwapExternAmountIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcJoinSwapExternAmountIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountIn.Merge(m, src)
}
func (m *MsgTransmitIbcJoinSwapExternAmountIn) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcJoinSwapExternAmountIn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountIn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountIn proto.InternalMessageInfo

func (m *MsgTransmitIbcJoinSwapExternAmountIn) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) GetShareOutMinAmount() int64 {
	if m != nil {
		return m.ShareOutMinAmount
	}
	return 0
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) GetTokenIn() types.Coin {
	if m != nil {
		return m.TokenIn
	}
	return types.Coin{}
}

type MsgTransmitIbcJoinSwapExternAmountInResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) Reset() {
	*m = MsgTransmitIbcJoinSwapExternAmountInResponse{}
}
func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgTransmitIbcJoinSwapExternAmountInResponse) ProtoMessage() {}
func (*MsgTransmitIbcJoinSwapExternAmountInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{14}
}
func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountInResponse.Merge(m, src)
}
func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcJoinSwapExternAmountInResponse proto.InternalMessageInfo

func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type MsgTransmitIbcExitSwapExternAmountOut struct {
	Creator          string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ConnectionId     string     `protobuf:"bytes,2,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	TimeoutTimestamp uint64     `protobuf:"varint,3,opt,name=timeoutTimestamp,proto3" json:"timeoutTimestamp,omitempty"`
	PoolId           uint64     `protobuf:"varint,4,opt,name=poolId,proto3" json:"poolId,omitempty"`
	ShareInAmount    int64      `protobuf:"varint,5,opt,name=shareInAmount,proto3" json:"shareInAmount,omitempty"`
	TokenOutMins     types.Coin `protobuf:"bytes,6,opt,name=tokenOutMins,proto3" json:"tokenOutMins"`
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) Reset()         { *m = MsgTransmitIbcExitSwapExternAmountOut{} }
func (m *MsgTransmitIbcExitSwapExternAmountOut) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitIbcExitSwapExternAmountOut) ProtoMessage()    {}
func (*MsgTransmitIbcExitSwapExternAmountOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{15}
}
func (m *MsgTransmitIbcExitSwapExternAmountOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcExitSwapExternAmountOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcExitSwapExternAmountOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOut.Merge(m, src)
}
func (m *MsgTransmitIbcExitSwapExternAmountOut) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcExitSwapExternAmountOut) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOut.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOut proto.InternalMessageInfo

func (m *MsgTransmitIbcExitSwapExternAmountOut) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) GetTimeoutTimestamp() uint64 {
	if m != nil {
		return m.TimeoutTimestamp
	}
	return 0
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) GetShareInAmount() int64 {
	if m != nil {
		return m.ShareInAmount
	}
	return 0
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) GetTokenOutMins() types.Coin {
	if m != nil {
		return m.TokenOutMins
	}
	return types.Coin{}
}

type MsgTransmitIbcExitSwapExternAmountOutResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) Reset() {
	*m = MsgTransmitIbcExitSwapExternAmountOutResponse{}
}
func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgTransmitIbcExitSwapExternAmountOutResponse) ProtoMessage() {}
func (*MsgTransmitIbcExitSwapExternAmountOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a78c651f644a1267, []int{16}
}
func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOutResponse.Merge(m, src)
}
func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitIbcExitSwapExternAmountOutResponse proto.InternalMessageInfo

func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgEmptyIbcResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgEmptyIbcResponse")
	proto.RegisterType((*MsgTestScenario)(nil), "quasarlabs.quasarnode.intergamm.MsgTestScenario")
	proto.RegisterType((*MsgTestScenarioResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgTestScenarioResponse")
	proto.RegisterType((*MsgSendToken)(nil), "quasarlabs.quasarnode.intergamm.MsgSendToken")
	proto.RegisterType((*MsgSendTokenResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgSendTokenResponse")
	proto.RegisterType((*MsgTransmitIbcJoinPool)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcJoinPool")
	proto.RegisterType((*MsgTransmitIbcJoinPoolResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcJoinPoolResponse")
	proto.RegisterType((*MsgTransmitIbcExitPool)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcExitPool")
	proto.RegisterType((*MsgTransmitIbcExitPoolResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcExitPoolResponse")
	proto.RegisterType((*MsgTransmitIbcLockTokens)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcLockTokens")
	proto.RegisterType((*MsgTransmitIbcLockTokensResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcLockTokensResponse")
	proto.RegisterType((*MsgTransmitIbcBeginUnlocking)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcBeginUnlocking")
	proto.RegisterType((*MsgTransmitIbcBeginUnlockingResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcBeginUnlockingResponse")
	proto.RegisterType((*MsgTransmitIbcJoinSwapExternAmountIn)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcJoinSwapExternAmountIn")
	proto.RegisterType((*MsgTransmitIbcJoinSwapExternAmountInResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcJoinSwapExternAmountInResponse")
	proto.RegisterType((*MsgTransmitIbcExitSwapExternAmountOut)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcExitSwapExternAmountOut")
	proto.RegisterType((*MsgTransmitIbcExitSwapExternAmountOutResponse)(nil), "quasarlabs.quasarnode.intergamm.MsgTransmitIbcExitSwapExternAmountOutResponse")
}

func init() { proto.RegisterFile("intergamm/tx.proto", fileDescriptor_a78c651f644a1267) }

var fileDescriptor_a78c651f644a1267 = []byte{
	// 922 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x97, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xe3, 0xdd, 0x4d, 0xda, 0xbc, 0x86, 0xb6, 0xb8, 0x6d, 0x70, 0x2d, 0xe4, 0x0d, 0x56,
	0x41, 0x11, 0x4a, 0x6c, 0x1a, 0x28, 0xb4, 0x48, 0x08, 0x92, 0x68, 0x41, 0x46, 0x31, 0x41, 0x4e,
	0xb8, 0xf4, 0x36, 0x6b, 0x8f, 0xdc, 0x51, 0xd6, 0x33, 0x1b, 0xcf, 0xb8, 0x6c, 0xb8, 0xc3, 0x15,
	0x90, 0x40, 0xe2, 0xca, 0x9f, 0x81, 0xc4, 0x8d, 0x4b, 0x6f, 0xed, 0x91, 0x53, 0x40, 0xc9, 0x8d,
	0x23, 0x7f, 0x01, 0xf2, 0xcf, 0xc4, 0xbb, 0x59, 0x67, 0xbd, 0x54, 0x55, 0x7a, 0xf3, 0xcc, 0xbc,
	0xef, 0xd7, 0xef, 0x7d, 0x34, 0xf3, 0xc6, 0x06, 0x99, 0x50, 0x81, 0x43, 0x1f, 0x05, 0x81, 0x29,
	0x06, 0x46, 0x3f, 0x64, 0x82, 0xc9, 0xed, 0xfd, 0x08, 0x71, 0x14, 0xf6, 0x50, 0x97, 0x1b, 0xe9,
	0x23, 0x65, 0x1e, 0x36, 0x8a, 0x48, 0xf5, 0xa6, 0xcf, 0x7c, 0x96, 0xc4, 0x9a, 0xf1, 0x53, 0x2a,
	0x53, 0x35, 0x97, 0xf1, 0x80, 0x71, 0xb3, 0x8b, 0x38, 0x36, 0x1f, 0xdf, 0xed, 0x62, 0x81, 0xee,
	0x9a, 0x2e, 0x23, 0x34, 0x5d, 0xd7, 0x6f, 0xc1, 0x0d, 0x9b, 0xfb, 0x9d, 0xa0, 0x2f, 0x0e, 0xac,
	0xae, 0xeb, 0x60, 0xde, 0x67, 0x94, 0x63, 0xfd, 0x33, 0xb8, 0x66, 0x73, 0x7f, 0x17, 0x73, 0xb1,
	0xe3, 0x62, 0x8a, 0x42, 0xc2, 0x64, 0x05, 0x2e, 0xb9, 0x21, 0x46, 0x82, 0x85, 0x8a, 0xb4, 0x24,
	0x2d, 0xcf, 0x3b, 0xf9, 0x50, 0x56, 0xe1, 0x32, 0xcf, 0xa2, 0x94, 0x46, 0xb2, 0x54, 0x8c, 0x75,
	0x1b, 0x5e, 0x1b, 0x32, 0xca, 0xdf, 0x21, 0x2f, 0xc2, 0x5c, 0x88, 0x79, 0xd4, 0x13, 0x99, 0x5f,
	0x36, 0x8a, 0xed, 0xf0, 0x80, 0x88, 0x4d, 0xe6, 0xe1, 0xc4, 0xae, 0xe9, 0x14, 0x63, 0xfd, 0x0f,
	0x09, 0x16, 0x6c, 0xee, 0xef, 0x60, 0xea, 0xed, 0xb2, 0x3d, 0x4c, 0x2b, 0xb2, 0x7a, 0x1f, 0x16,
	0x3d, 0xcc, 0x05, 0xa1, 0x48, 0x10, 0x46, 0xb7, 0x98, 0x8b, 0x7a, 0x0f, 0x19, 0xc5, 0x96, 0x97,
	0xe5, 0x38, 0x66, 0x35, 0x4e, 0x8b, 0x63, 0xea, 0xe1, 0x50, 0x69, 0xa6, 0x69, 0xa5, 0xa3, 0x38,
	0xad, 0x10, 0xbb, 0x98, 0x3c, 0xc6, 0xa1, 0xd2, 0x4a, 0xab, 0xcc, 0xc7, 0xf2, 0x2a, 0xb4, 0x62,
	0xa6, 0xca, 0xec, 0x92, 0xb4, 0x7c, 0x65, 0xed, 0xb6, 0x91, 0x42, 0x37, 0x62, 0xe8, 0x46, 0x06,
	0xdd, 0xd8, 0x64, 0x84, 0x3a, 0x49, 0x98, 0xbe, 0x0c, 0x37, 0x4f, 0x17, 0x51, 0x10, 0xb9, 0x0e,
	0x4d, 0x8e, 0xf7, 0x93, 0x42, 0x5a, 0x4e, 0xfc, 0xa8, 0x7f, 0xdb, 0x80, 0xc5, 0x98, 0x5f, 0x88,
	0x28, 0x0f, 0x88, 0xb0, 0xba, 0xee, 0xe7, 0x8c, 0xd0, 0x2f, 0x19, 0xeb, 0x55, 0x54, 0xae, 0xc3,
	0x82, 0xcb, 0x28, 0xc5, 0x6e, 0x5c, 0x5a, 0x51, 0x6f, 0x69, 0x4e, 0x7e, 0x1b, 0xae, 0x0b, 0x12,
	0x60, 0x16, 0x89, 0x5d, 0x12, 0x60, 0x2e, 0x50, 0xd0, 0x4f, 0xea, 0x6d, 0x39, 0x23, 0xf3, 0x31,
	0x91, 0x3e, 0x63, 0x3d, 0xcb, 0x4b, 0xea, 0x6e, 0x39, 0xd9, 0x48, 0x7e, 0x0b, 0xae, 0xf2, 0x47,
	0x28, 0xc4, 0xdb, 0x91, 0x58, 0x0f, 0x58, 0x44, 0x45, 0x52, 0x7f, 0xd3, 0x19, 0x9a, 0x95, 0xd7,
	0xe1, 0x8a, 0x88, 0xeb, 0xb4, 0xa8, 0x8d, 0x06, 0x5c, 0x99, 0x5b, 0x6a, 0x56, 0x42, 0xda, 0x68,
	0x3d, 0x39, 0x6c, 0xcf, 0x38, 0xa7, 0x35, 0xfa, 0x1a, 0x68, 0x67, 0x63, 0xa8, 0xc5, 0xae, 0x33,
	0x20, 0xe2, 0x82, 0xb0, 0xbb, 0x03, 0xaf, 0x24, 0x94, 0x2c, 0x5a, 0x42, 0x57, 0x9e, 0x94, 0x37,
	0x61, 0x21, 0xa1, 0xb0, 0x1d, 0x09, 0x9b, 0xd0, 0x89, 0xd1, 0x95, 0x44, 0xa3, 0xec, 0x72, 0x0c,
	0x15, 0xec, 0xbe, 0x6b, 0x80, 0x52, 0x16, 0x6d, 0x31, 0x77, 0x2f, 0xd9, 0xad, 0xfc, 0x05, 0xd2,
	0xb3, 0xe0, 0xb2, 0x17, 0x85, 0xc9, 0x11, 0x4d, 0xf9, 0x6d, 0xac, 0xfe, 0x73, 0xd8, 0x96, 0xf3,
	0xb9, 0x15, 0x16, 0x10, 0x81, 0xe3, 0xde, 0xf5, 0xef, 0x61, 0xfb, 0xda, 0x01, 0x0a, 0x7a, 0x1f,
	0xea, 0xf9, 0x9a, 0xfe, 0xcb, 0x5f, 0x6d, 0xc9, 0x29, 0xe4, 0xf2, 0x3d, 0x98, 0x8d, 0xcf, 0x1e,
	0x57, 0x66, 0x27, 0x63, 0x98, 0x46, 0xeb, 0xef, 0xc1, 0xd2, 0x38, 0x0e, 0x15, 0xf8, 0x9e, 0x4a,
	0xf0, 0x7a, 0x59, 0xb6, 0x81, 0x7d, 0x42, 0xbf, 0xa2, 0x3d, 0xe6, 0xee, 0x11, 0xea, 0xbf, 0x40,
	0x84, 0x57, 0xa1, 0x41, 0xf2, 0xcd, 0xd7, 0x20, 0xde, 0xb4, 0x1c, 0xee, 0xc3, 0x9d, 0xaa, 0x82,
	0x2a, 0x58, 0xfc, 0xd8, 0x18, 0x96, 0xc6, 0x67, 0x77, 0xe7, 0x6b, 0xd4, 0xef, 0x0c, 0x04, 0x0e,
	0xb3, 0xad, 0x6e, 0xd1, 0x0b, 0x70, 0x28, 0x57, 0xe0, 0xd5, 0xbc, 0x75, 0xd9, 0xa4, 0x7c, 0x30,
	0x47, 0x17, 0xe4, 0x07, 0x70, 0x29, 0x6b, 0x51, 0xca, 0xdc, 0x39, 0x7d, 0x3f, 0x63, 0x99, 0xc7,
	0xeb, 0x9f, 0xc0, 0xca, 0x24, 0x48, 0x2a, 0xa8, 0xfe, 0xd4, 0x80, 0x37, 0x47, 0x4f, 0xf5, 0xb0,
	0xc5, 0x76, 0x24, 0x5e, 0xe2, 0x5e, 0x27, 0xd5, 0xef, 0x75, 0xeb, 0xb0, 0x3a, 0x11, 0x95, 0xf1,
	0x64, 0xd7, 0x9e, 0xce, 0x43, 0xd3, 0xe6, 0xbe, 0xfc, 0x0d, 0x2c, 0x94, 0xbe, 0x7f, 0xde, 0x31,
	0xce, 0xf9, 0x02, 0x33, 0x86, 0x3e, 0x74, 0xd4, 0xfb, 0x75, 0x15, 0x45, 0x56, 0xdf, 0x4b, 0x70,
	0xe3, 0xac, 0x3b, 0xff, 0x83, 0x89, 0x1c, 0x47, 0x85, 0xea, 0xc7, 0x53, 0x0a, 0xc7, 0x65, 0x54,
	0xdc, 0xa4, 0x75, 0x33, 0xca, 0x85, 0xb5, 0x33, 0x1a, 0xb9, 0xb4, 0x7e, 0x96, 0xe0, 0xd6, 0xd9,
	0xf7, 0xd3, 0x83, 0x9a, 0xd6, 0x27, 0x52, 0x75, 0x7d, 0x6a, 0x69, 0x91, 0xd7, 0xaf, 0x12, 0xdc,
	0x1e, 0xdf, 0xf8, 0x3f, 0xaa, 0xf9, 0x82, 0xb2, 0x5c, 0xed, 0xfc, 0x2f, 0x79, 0x91, 0xe3, 0x6f,
	0x12, 0xbc, 0x71, 0x7e, 0x43, 0xee, 0x4c, 0xb1, 0x69, 0x46, 0x6d, 0x54, 0xfb, 0xb9, 0xd8, 0x14,
	0xb9, 0xff, 0x2e, 0x81, 0x3e, 0x41, 0xdb, 0xfb, 0x74, 0x8a, 0xfd, 0x75, 0x86, 0x8f, 0xfa, 0xc5,
	0xf3, 0xf1, 0x29, 0xd2, 0xdf, 0x87, 0xf9, 0x93, 0xbf, 0x97, 0xd5, 0x49, 0xcc, 0x8b, 0x70, 0xf5,
	0x5e, 0xad, 0xf0, 0xfc, 0x95, 0x1b, 0x5b, 0x4f, 0x8e, 0x34, 0xe9, 0xd9, 0x91, 0x26, 0xfd, 0x7d,
	0xa4, 0x49, 0x3f, 0x1c, 0x6b, 0x33, 0xcf, 0x8e, 0xb5, 0x99, 0x3f, 0x8f, 0xb5, 0x99, 0x87, 0x6b,
	0x3e, 0x11, 0x8f, 0xa2, 0xae, 0xe1, 0xb2, 0xc0, 0x3c, 0xb1, 0x36, 0x4f, 0xac, 0xcd, 0x81, 0x79,
	0xea, 0x5f, 0xf4, 0xa0, 0x8f, 0x79, 0x77, 0x2e, 0xf9, 0x71, 0x7c, 0xf7, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0xe5, 0x8d, 0xc8, 0xa5, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	TestScenario(ctx context.Context, in *MsgTestScenario, opts ...grpc.CallOption) (*MsgTestScenarioResponse, error)
	TransmitIbcJoinPool(ctx context.Context, in *MsgTransmitIbcJoinPool, opts ...grpc.CallOption) (*MsgTransmitIbcJoinPoolResponse, error)
	TransmitIbcExitPool(ctx context.Context, in *MsgTransmitIbcExitPool, opts ...grpc.CallOption) (*MsgTransmitIbcExitPoolResponse, error)
	TransmitIbcLockTokens(ctx context.Context, in *MsgTransmitIbcLockTokens, opts ...grpc.CallOption) (*MsgTransmitIbcLockTokensResponse, error)
	TransmitIbcBeginUnlocking(ctx context.Context, in *MsgTransmitIbcBeginUnlocking, opts ...grpc.CallOption) (*MsgTransmitIbcBeginUnlockingResponse, error)
	TransmitIbcJoinSwapExternAmountIn(ctx context.Context, in *MsgTransmitIbcJoinSwapExternAmountIn, opts ...grpc.CallOption) (*MsgTransmitIbcJoinSwapExternAmountInResponse, error)
	TransmitIbcExitSwapExternAmountOut(ctx context.Context, in *MsgTransmitIbcExitSwapExternAmountOut, opts ...grpc.CallOption) (*MsgTransmitIbcExitSwapExternAmountOutResponse, error)
	SendToken(ctx context.Context, in *MsgSendToken, opts ...grpc.CallOption) (*MsgSendTokenResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) TestScenario(ctx context.Context, in *MsgTestScenario, opts ...grpc.CallOption) (*MsgTestScenarioResponse, error) {
	out := new(MsgTestScenarioResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/TestScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransmitIbcJoinPool(ctx context.Context, in *MsgTransmitIbcJoinPool, opts ...grpc.CallOption) (*MsgTransmitIbcJoinPoolResponse, error) {
	out := new(MsgTransmitIbcJoinPoolResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcJoinPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransmitIbcExitPool(ctx context.Context, in *MsgTransmitIbcExitPool, opts ...grpc.CallOption) (*MsgTransmitIbcExitPoolResponse, error) {
	out := new(MsgTransmitIbcExitPoolResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcExitPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransmitIbcLockTokens(ctx context.Context, in *MsgTransmitIbcLockTokens, opts ...grpc.CallOption) (*MsgTransmitIbcLockTokensResponse, error) {
	out := new(MsgTransmitIbcLockTokensResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcLockTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransmitIbcBeginUnlocking(ctx context.Context, in *MsgTransmitIbcBeginUnlocking, opts ...grpc.CallOption) (*MsgTransmitIbcBeginUnlockingResponse, error) {
	out := new(MsgTransmitIbcBeginUnlockingResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcBeginUnlocking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransmitIbcJoinSwapExternAmountIn(ctx context.Context, in *MsgTransmitIbcJoinSwapExternAmountIn, opts ...grpc.CallOption) (*MsgTransmitIbcJoinSwapExternAmountInResponse, error) {
	out := new(MsgTransmitIbcJoinSwapExternAmountInResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcJoinSwapExternAmountIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransmitIbcExitSwapExternAmountOut(ctx context.Context, in *MsgTransmitIbcExitSwapExternAmountOut, opts ...grpc.CallOption) (*MsgTransmitIbcExitSwapExternAmountOutResponse, error) {
	out := new(MsgTransmitIbcExitSwapExternAmountOutResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcExitSwapExternAmountOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendToken(ctx context.Context, in *MsgSendToken, opts ...grpc.CallOption) (*MsgSendTokenResponse, error) {
	out := new(MsgSendTokenResponse)
	err := c.cc.Invoke(ctx, "/quasarlabs.quasarnode.intergamm.Msg/SendToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	TestScenario(context.Context, *MsgTestScenario) (*MsgTestScenarioResponse, error)
	TransmitIbcJoinPool(context.Context, *MsgTransmitIbcJoinPool) (*MsgTransmitIbcJoinPoolResponse, error)
	TransmitIbcExitPool(context.Context, *MsgTransmitIbcExitPool) (*MsgTransmitIbcExitPoolResponse, error)
	TransmitIbcLockTokens(context.Context, *MsgTransmitIbcLockTokens) (*MsgTransmitIbcLockTokensResponse, error)
	TransmitIbcBeginUnlocking(context.Context, *MsgTransmitIbcBeginUnlocking) (*MsgTransmitIbcBeginUnlockingResponse, error)
	TransmitIbcJoinSwapExternAmountIn(context.Context, *MsgTransmitIbcJoinSwapExternAmountIn) (*MsgTransmitIbcJoinSwapExternAmountInResponse, error)
	TransmitIbcExitSwapExternAmountOut(context.Context, *MsgTransmitIbcExitSwapExternAmountOut) (*MsgTransmitIbcExitSwapExternAmountOutResponse, error)
	SendToken(context.Context, *MsgSendToken) (*MsgSendTokenResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) TestScenario(ctx context.Context, req *MsgTestScenario) (*MsgTestScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestScenario not implemented")
}
func (*UnimplementedMsgServer) TransmitIbcJoinPool(ctx context.Context, req *MsgTransmitIbcJoinPool) (*MsgTransmitIbcJoinPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitIbcJoinPool not implemented")
}
func (*UnimplementedMsgServer) TransmitIbcExitPool(ctx context.Context, req *MsgTransmitIbcExitPool) (*MsgTransmitIbcExitPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitIbcExitPool not implemented")
}
func (*UnimplementedMsgServer) TransmitIbcLockTokens(ctx context.Context, req *MsgTransmitIbcLockTokens) (*MsgTransmitIbcLockTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitIbcLockTokens not implemented")
}
func (*UnimplementedMsgServer) TransmitIbcBeginUnlocking(ctx context.Context, req *MsgTransmitIbcBeginUnlocking) (*MsgTransmitIbcBeginUnlockingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitIbcBeginUnlocking not implemented")
}
func (*UnimplementedMsgServer) TransmitIbcJoinSwapExternAmountIn(ctx context.Context, req *MsgTransmitIbcJoinSwapExternAmountIn) (*MsgTransmitIbcJoinSwapExternAmountInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitIbcJoinSwapExternAmountIn not implemented")
}
func (*UnimplementedMsgServer) TransmitIbcExitSwapExternAmountOut(ctx context.Context, req *MsgTransmitIbcExitSwapExternAmountOut) (*MsgTransmitIbcExitSwapExternAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransmitIbcExitSwapExternAmountOut not implemented")
}
func (*UnimplementedMsgServer) SendToken(ctx context.Context, req *MsgSendToken) (*MsgSendTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToken not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_TestScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTestScenario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TestScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/TestScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TestScenario(ctx, req.(*MsgTestScenario))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransmitIbcJoinPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransmitIbcJoinPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransmitIbcJoinPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcJoinPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransmitIbcJoinPool(ctx, req.(*MsgTransmitIbcJoinPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransmitIbcExitPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransmitIbcExitPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransmitIbcExitPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcExitPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransmitIbcExitPool(ctx, req.(*MsgTransmitIbcExitPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransmitIbcLockTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransmitIbcLockTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransmitIbcLockTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcLockTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransmitIbcLockTokens(ctx, req.(*MsgTransmitIbcLockTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransmitIbcBeginUnlocking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransmitIbcBeginUnlocking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransmitIbcBeginUnlocking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcBeginUnlocking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransmitIbcBeginUnlocking(ctx, req.(*MsgTransmitIbcBeginUnlocking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransmitIbcJoinSwapExternAmountIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransmitIbcJoinSwapExternAmountIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransmitIbcJoinSwapExternAmountIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcJoinSwapExternAmountIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransmitIbcJoinSwapExternAmountIn(ctx, req.(*MsgTransmitIbcJoinSwapExternAmountIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransmitIbcExitSwapExternAmountOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransmitIbcExitSwapExternAmountOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransmitIbcExitSwapExternAmountOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/TransmitIbcExitSwapExternAmountOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransmitIbcExitSwapExternAmountOut(ctx, req.(*MsgTransmitIbcExitSwapExternAmountOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quasarlabs.quasarnode.intergamm.Msg/SendToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendToken(ctx, req.(*MsgSendToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quasarlabs.quasarnode.intergamm.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestScenario",
			Handler:    _Msg_TestScenario_Handler,
		},
		{
			MethodName: "TransmitIbcJoinPool",
			Handler:    _Msg_TransmitIbcJoinPool_Handler,
		},
		{
			MethodName: "TransmitIbcExitPool",
			Handler:    _Msg_TransmitIbcExitPool_Handler,
		},
		{
			MethodName: "TransmitIbcLockTokens",
			Handler:    _Msg_TransmitIbcLockTokens_Handler,
		},
		{
			MethodName: "TransmitIbcBeginUnlocking",
			Handler:    _Msg_TransmitIbcBeginUnlocking_Handler,
		},
		{
			MethodName: "TransmitIbcJoinSwapExternAmountIn",
			Handler:    _Msg_TransmitIbcJoinSwapExternAmountIn_Handler,
		},
		{
			MethodName: "TransmitIbcExitSwapExternAmountOut",
			Handler:    _Msg_TransmitIbcExitSwapExternAmountOut_Handler,
		},
		{
			MethodName: "SendToken",
			Handler:    _Msg_SendToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intergamm/tx.proto",
}

func (m *MsgEmptyIbcResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEmptyIbcResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEmptyIbcResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTestScenario) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTestScenario) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTestScenario) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scenario) > 0 {
		i -= len(m.Scenario)
		copy(dAtA[i:], m.Scenario)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Scenario)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTestScenarioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTestScenarioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTestScenarioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExitCode != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationLocalZoneId) > 0 {
		i -= len(m.DestinationLocalZoneId)
		copy(dAtA[i:], m.DestinationLocalZoneId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationLocalZoneId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcJoinPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcJoinPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcJoinPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenInMaxs) > 0 {
		for iNdEx := len(m.TokenInMaxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenInMaxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ShareOutAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ShareOutAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcJoinPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcJoinPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcJoinPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcExitPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcExitPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcExitPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOutMins) > 0 {
		for iNdEx := len(m.TokenOutMins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenOutMins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ShareInAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ShareInAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcExitPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcExitPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcExitPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcLockTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcLockTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcLockTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Duration != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcLockTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcLockTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcLockTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcBeginUnlocking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcBeginUnlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcBeginUnlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcBeginUnlockingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcBeginUnlockingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcBeginUnlockingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ShareOutMinAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ShareOutMinAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenOutMins.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ShareInAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ShareInAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgEmptyIbcResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTestScenario) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Scenario)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTestScenarioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExitCode != 0 {
		n += 1 + sovTx(uint64(m.ExitCode))
	}
	return n
}

func (m *MsgSendToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationLocalZoneId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovTx(uint64(m.Seq))
	}
	return n
}

func (m *MsgTransmitIbcJoinPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.ShareOutAmount != 0 {
		n += 1 + sovTx(uint64(m.ShareOutAmount))
	}
	if len(m.TokenInMaxs) > 0 {
		for _, e := range m.TokenInMaxs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransmitIbcJoinPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovTx(uint64(m.Seq))
	}
	return n
}

func (m *MsgTransmitIbcExitPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.ShareInAmount != 0 {
		n += 1 + sovTx(uint64(m.ShareInAmount))
	}
	if len(m.TokenOutMins) > 0 {
		for _, e := range m.TokenOutMins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransmitIbcExitPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovTx(uint64(m.Seq))
	}
	return n
}

func (m *MsgTransmitIbcLockTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.Duration != 0 {
		n += 1 + sovTx(uint64(m.Duration))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransmitIbcLockTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovTx(uint64(m.Seq))
	}
	return n
}

func (m *MsgTransmitIbcBeginUnlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransmitIbcBeginUnlockingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovTx(uint64(m.Seq))
	}
	return n
}

func (m *MsgTransmitIbcJoinSwapExternAmountIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.ShareOutMinAmount != 0 {
		n += 1 + sovTx(uint64(m.ShareOutMinAmount))
	}
	l = m.TokenIn.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovTx(uint64(m.Seq))
	}
	return n
}

func (m *MsgTransmitIbcExitSwapExternAmountOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovTx(uint64(m.TimeoutTimestamp))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.ShareInAmount != 0 {
		n += 1 + sovTx(uint64(m.ShareInAmount))
	}
	l = m.TokenOutMins.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovTx(uint64(m.Seq))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgEmptyIbcResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEmptyIbcResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEmptyIbcResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTestScenario) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTestScenario: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTestScenario: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scenario", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scenario = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTestScenarioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTestScenarioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTestScenarioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationLocalZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationLocalZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &types.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcJoinPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareOutAmount", wireType)
			}
			m.ShareOutAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareOutAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInMaxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInMaxs = append(m.TokenInMaxs, types.Coin{})
			if err := m.TokenInMaxs[len(m.TokenInMaxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcJoinPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcExitPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcExitPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcExitPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareInAmount", wireType)
			}
			m.ShareInAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareInAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutMins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutMins = append(m.TokenOutMins, types.Coin{})
			if err := m.TokenOutMins[len(m.TokenOutMins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcExitPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcExitPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcExitPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcLockTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcLockTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcLockTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcLockTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcLockTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcLockTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcBeginUnlocking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcBeginUnlocking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcBeginUnlocking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcBeginUnlockingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcBeginUnlockingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcBeginUnlockingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcJoinSwapExternAmountIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinSwapExternAmountIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinSwapExternAmountIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareOutMinAmount", wireType)
			}
			m.ShareOutMinAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareOutMinAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcJoinSwapExternAmountInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinSwapExternAmountInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcJoinSwapExternAmountInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcExitSwapExternAmountOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcExitSwapExternAmountOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcExitSwapExternAmountOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareInAmount", wireType)
			}
			m.ShareInAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareInAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutMins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOutMins.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitIbcExitSwapExternAmountOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitIbcExitSwapExternAmountOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitIbcExitSwapExternAmountOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
