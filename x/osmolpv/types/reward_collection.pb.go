// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmolpv/reward_collection.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardCollection is used to do the book keeping of the reward
// collected from the osmosis on a given epochday. This is further used for the approx distribution.
type RewardCollection struct {
	// uint64 timeCollected = 1;
	TimeCollected time.Time                                `protobuf:"bytes,1,opt,name=timeCollected,proto3,stdtime" json:"timeCollected" yaml:"startTime"`
	Coins         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *RewardCollection) Reset()         { *m = RewardCollection{} }
func (m *RewardCollection) String() string { return proto.CompactTextString(m) }
func (*RewardCollection) ProtoMessage()    {}
func (*RewardCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_77d80dd2224e904e, []int{0}
}
func (m *RewardCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardCollection.Merge(m, src)
}
func (m *RewardCollection) XXX_Size() int {
	return m.Size()
}
func (m *RewardCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardCollection.DiscardUnknown(m)
}

var xxx_messageInfo_RewardCollection proto.InternalMessageInfo

func (m *RewardCollection) GetTimeCollected() time.Time {
	if m != nil {
		return m.TimeCollected
	}
	return time.Time{}
}

func (m *RewardCollection) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterType((*RewardCollection)(nil), "abag.quasarnode.osmolpv.RewardCollection")
}

func init() { proto.RegisterFile("osmolpv/reward_collection.proto", fileDescriptor_77d80dd2224e904e) }

var fileDescriptor_77d80dd2224e904e = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4d, 0x4e, 0xfb, 0x30,
	0x10, 0xc5, 0xe3, 0xff, 0x5f, 0xb0, 0x48, 0x85, 0x54, 0x55, 0x48, 0x94, 0x08, 0x39, 0x55, 0x57,
	0x15, 0x12, 0x1e, 0x5a, 0x76, 0x2c, 0x5b, 0x4e, 0x50, 0xb1, 0x62, 0x01, 0x72, 0x12, 0x63, 0x22,
	0x92, 0x4e, 0x88, 0xdd, 0x42, 0x6f, 0xd1, 0x73, 0x70, 0x92, 0x2e, 0xbb, 0x41, 0x62, 0xd5, 0xa2,
	0xf6, 0x06, 0x9c, 0x00, 0xd9, 0x4e, 0xf8, 0x58, 0xf9, 0x63, 0xde, 0xfc, 0xf4, 0xde, 0x8c, 0x1f,
	0xa2, 0xca, 0x31, 0x2b, 0x66, 0x50, 0x8a, 0x67, 0x5e, 0x26, 0x77, 0x31, 0x66, 0x99, 0x88, 0x75,
	0x8a, 0x13, 0x56, 0x94, 0xa8, 0xb1, 0x75, 0xc4, 0x23, 0x2e, 0xd9, 0xd3, 0x94, 0x2b, 0x5e, 0x4e,
	0x30, 0x11, 0xac, 0x6a, 0x08, 0x0e, 0x25, 0x4a, 0xb4, 0x1a, 0x30, 0x37, 0x27, 0x0f, 0x68, 0x6c,
	0xea, 0x0a, 0x22, 0xae, 0x04, 0xcc, 0xfa, 0x91, 0xd0, 0xbc, 0x0f, 0x31, 0xa6, 0x15, 0x2e, 0x08,
	0x25, 0xa2, 0xcc, 0x04, 0xd8, 0x57, 0x34, 0xbd, 0x07, 0x9d, 0xe6, 0x42, 0x69, 0x9e, 0x17, 0x4e,
	0xd0, 0x7d, 0x23, 0x7e, 0x73, 0x6c, 0xbd, 0x8c, 0xbe, 0xad, 0xb4, 0x6e, 0xfd, 0x03, 0xa3, 0xab,
	0x7e, 0x44, 0xd2, 0x26, 0x1d, 0xd2, 0x6b, 0x0c, 0x02, 0xe6, 0x68, 0xac, 0xa6, 0xb1, 0xeb, 0x9a,
	0x36, 0x3c, 0x59, 0xae, 0x43, 0xef, 0x73, 0x1d, 0x36, 0xe7, 0x3c, 0xcf, 0x2e, 0xbb, 0x4a, 0xf3,
	0x52, 0x9b, 0x6a, 0x77, 0xb1, 0x09, 0xc9, 0xf8, 0x2f, 0xae, 0xc5, 0xfd, 0x3d, 0xe3, 0x51, 0xb5,
	0xff, 0x75, 0xfe, 0xf7, 0x1a, 0x83, 0x63, 0xe6, 0x52, 0x30, 0x93, 0x82, 0x55, 0x29, 0xd8, 0x08,
	0xd3, 0xc9, 0xf0, 0xdc, 0x60, 0x5f, 0x37, 0x61, 0x4f, 0xa6, 0xfa, 0x61, 0x1a, 0xb1, 0x18, 0x73,
	0xa8, 0x22, 0xbb, 0xe3, 0x4c, 0x25, 0x8f, 0xa0, 0xe7, 0x85, 0x50, 0xb6, 0x41, 0x8d, 0x1d, 0x79,
	0x78, 0xb5, 0xdc, 0x52, 0xb2, 0xda, 0x52, 0xf2, 0xb1, 0xa5, 0x64, 0xb1, 0xa3, 0xde, 0x6a, 0x47,
	0xbd, 0xf7, 0x1d, 0xf5, 0x6e, 0x4e, 0x7f, 0xa1, 0xcc, 0xb0, 0xe1, 0x67, 0xd8, 0xf0, 0x02, 0xf5,
	0x7e, 0x2c, 0x32, 0xda, 0xb7, 0x49, 0x2f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x54, 0x89, 0x89,
	0x09, 0xb7, 0x01, 0x00, 0x00,
}

func (m *RewardCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewardCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TimeCollected, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TimeCollected):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRewardCollection(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRewardCollection(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewardCollection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TimeCollected)
	n += 1 + l + sovRewardCollection(uint64(l))
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovRewardCollection(uint64(l))
		}
	}
	return n
}

func sovRewardCollection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewardCollection(x uint64) (n int) {
	return sovRewardCollection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewardCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCollected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewardCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewardCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TimeCollected, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewardCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewardCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewardCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewardCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewardCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewardCollection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewardCollection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewardCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewardCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewardCollection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewardCollection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewardCollection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewardCollection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewardCollection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewardCollection = fmt.Errorf("proto: unexpected end of group")
)
