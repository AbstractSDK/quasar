#!/usr/bin/env bash

set -Cue -o pipefail

project_dir="$(cd "$(dirname "${0}")/../.." ; pwd)" # Absolute path to project dir
this_dir="${project_dir}/integration_tests/intergamm-osmosis"
this_script="${this_dir}/$(basename "${0}")"
run_dir="${this_dir}/run"
relayer_out_file="${run_dir}/relayer.out"
relayer_pid_file="${run_dir}/relayer.pid"
reset_run="${RESET:-true}"
stop_after_script="${STOP:-true}"

fail() {
  echo "$*"
  false
}

cmd_exists() {
  type "$1" >/dev/null 2>&1 || fail "command '${1}' not available"
}

env_subst() {
  python -c '
import os, sys
data = sys.stdin.read(65536)
for v in os.environ:
  data = data.replace("$%s" % v, os.environ[v])
  data = data.replace("${%s}" % v, os.environ[v])
sys.stdout.write(data) ; sys.stdout.flush()
'
}

do_until_success() {
  while ! "$@" ; do
    sleep 1
  done
}

start_chain_bg() {
  (
    local name="$1" ; shift
    local dir="$1"  ; shift

    echo "starting ${name} chain"

    cd "$dir"

    local chain_dir="${run_dir}/${name}"

    if [ "$reset_run" == "true" ] ; then
      rm -rf "$chain_dir"
    fi

    export home_dir="${chain_dir}/home"
    mkdir -p "$home_dir"

    cat "${this_dir}/${name}.yml" | env_subst >| "${chain_dir}/config.yml"

    ignite chain serve --config "${chain_dir}/config.yml" -v >| "${chain_dir}/${name}.out" 2>&1 &
    echo "$!" >| "${chain_dir}/${name}.pid"
  )
}

start_relayer_cmd() {
  local hermes_cfg="${this_dir}/hermes.toml"

  # Alice on quasar
  hermes -c "$hermes_cfg" keys restore "quasar"  --name "testkey1" --mnemonic "jungle law popular reunion festival horn divorce quarter image gather october weird slide trend resource render abuse food tomorrow multiply price fun ask quarter"
  # Alice on osmosis
  hermes -c "$hermes_cfg" keys restore "osmosis" --name "testkey2" --mnemonic "act scale exhibit enough swamp vivid bleak eagle giggle brass desert debris network scrub hazard fame salon normal over between inform advance sick dinner"

  echo "starting hermes relayer"

  do_until_success hermes -c "$hermes_cfg" create connection "quasar" "osmosis"
  do_until_success hermes -c "$hermes_cfg" create channel    "quasar" "connection-0" --port-a "transfer" --port-b "transfer"

  do_until_success hermes -c "$hermes_cfg" start
}

start_quasar()  { start_chain_bg "quasar"  "${project_dir}"                                ; }
start_osmosis() { start_chain_bg "osmosis" "${project_dir}/../contrib/osmosis-quasar-fork" ; }

start_relayer() {
  "$this_script" start_relayer_cmd >| "$relayer_out_file" 2>&1 &
  echo "$!" >| "$relayer_pid_file"
}

ensure_relayer_started() {
  while ! cat "$relayer_out_file" | grep "Hermes has started" >/dev/null 2>&1 ; do
    sleep 1
  done
}

stop_chain() {
  local name="$1" ; shift
  local chain_dir="${run_dir}/${name}"
  local pid_file="${chain_dir}/${name}.pid"

  kill -9 "$(cat "${pid_file}")" || true
}

stop_relayer() {
  kill -9 "$(cat "${relayer_pid_file}")" || true
  pkill -9 -f "hermes" || true
}
stop_quasar() {
  stop_chain "quasar"
  pkill -9 -f "ignite" || true
  pkill -9 -f "quasarnoded" || true
}

stop_osmosis() {
  stop_chain "osmosis"
  pkill -9 -f "ignite" || true
  pkill -9 -f "osmosisd" || true
}

start_all() {
  if [ "$reset_run" == true ] ; then
    rm -rf ~/.ignite/
  fi

  start_quasar
  start_osmosis
  start_relayer
}

stop_all() {
  stop_quasar  || true
  stop_osmosis || true
  stop_relayer || true
}

fund_host_ica() {
  for denom_amount in 10000000000uatom 10000000000uosmo ; do
    osmosistx bank send osmo1t8eh66t2w5k67kwurmn5gqhtq6d2ja0vp7jmmq osmo1hphwfu3yjf82z8xpcl6e05gzkjwjmu8ts2m97mdk62feuqm77f2skm6qcy "$denom_amount" -y
  done
}

quasar() {
  local home_dir="${run_dir}/quasar/home"

  quasarnoded \
    --home "$home_dir" \
    --node=http://localhost:26659 \
    --chain-id quasar \
    "$@"
}

quasarq() {
  quasar query "$@"
}

quasartx() {
  quasar tx --from alice "$@"
}

osmosis() {
  local home_dir="${run_dir}/osmosis/home"

  osmosisd \
    --home "$home_dir" \
    --node=http://localhost:26559 \
    --chain-id osmosis \
    "$@"
}

osmosisq() {
  osmosis query "$@"
}

osmosistx() {
  osmosis tx --from alice "$@"
}

ensure_all_started() {
  start_all

  sleep 20

  ensure_relayer_started
}

test -d "${project_dir}/../contrib/osmosis-quasar-fork" || fail "osmosis dir not found"

cmd_exists "osmosisd"
cmd_exists "quasarnoded"
cmd_exists "hermes"

run() {
  # Make sure everything is stopped at the end of script
  if [ "$stop_after_script" == "true" ] ; then
    trap stop_all 0
  fi

  ensure_all_started

  quasartx intergamm test --scenario setup -y

  fund_host_ica

  # Create pool

  echo "> scenario: createPool"
  quasartx intergamm test --scenario createPool -y
  sleep 8

  echo "> scenario: createPoolChecks"
  quasartx intergamm test --scenario createPoolChecks -y

  echo "> scenario: createPoolTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario createPoolTimeout -y
  sleep 8

  echo "> scenario: createPoolTimeoutChecks"
  quasartx intergamm test --scenario createPoolTimeoutChecks -y

  # Join pool

  echo "> scenario: joinPool"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario joinPool -y
  sleep 8

  echo "> scenario: joinPoolChecks"
  quasartx intergamm test --scenario joinPoolChecks -y

  echo "> scenario: joinPoolTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario joinPoolTimeout -y
  sleep 8

  echo "> scenario: joinPoolTimeoutChecks"
  quasartx intergamm test --scenario joinPoolTimeoutChecks -y

  # Lock tokens

  echo "> scenario: lockTokens"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario lockTokens -y
  sleep 8

  echo "> scenario: lockTokensChecks"
  quasartx intergamm test --scenario lockTokensChecks -y

  echo "> scenario: lockTokensTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario lockTokensTimeout -y
  sleep 8

  echo "> scenario: lockTokensTimeoutChecks"
  quasartx intergamm test --scenario lockTokensTimeoutChecks -y

  # Exit pool

  echo "> scenario: exitPool"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario exitPool -y
  sleep 8

  echo "> scenario: exitPoolChecks"
  quasartx intergamm test --scenario exitPoolChecks -y

  echo "> scenario: exitPoolTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario exitPoolTimeout -y
  sleep 8

  echo "> scenario: exitPoolTimeoutChecks"
  quasartx intergamm test --scenario exitPoolTimeoutChecks -y

  # Join pool single denom 1

  echo "> scenario: joinSwapExternAmountIn"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario joinSwapExternAmountIn -y
  sleep 8

  echo "> scenario: joinSwapExternAmountInChecks"
  quasartx intergamm test --scenario joinSwapExternAmountInChecks -y

  echo "> scenario: joinSwapExternAmountInTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario joinSwapExternAmountInTimeout -y
  sleep 8

  echo "> scenario: joinSwapExternAmountInTimeoutChecks"
  quasartx intergamm test --scenario joinSwapExternAmountInTimeoutChecks -y

  # Exit pool single denom 1

  echo "> scenario: exitSwapExternAmountOut"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario exitSwapExternAmountOut -y
  sleep 8

  echo "> scenario: exitSwapExternAmountOutChecks"
  quasartx intergamm test --scenario exitSwapExternAmountOutChecks -y

  echo "> scenario: exitSwapExternAmountOutTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario exitSwapExternAmountOutTimeout -y
  sleep 8

  echo "> scenario: exitSwapExternAmountOutTimeoutChecks"
  quasartx intergamm test --scenario exitSwapExternAmountOutTimeoutChecks -y

  # Join pool single denom 2

  echo "> scenario: joinSwapShareAmountOut"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario joinSwapShareAmountOut -y
  sleep 8

  echo "> scenario: joinSwapShareAmountOutChecks"
  quasartx intergamm test --scenario joinSwapShareAmountOutChecks -y

  echo "> scenario: joinSwapShareAmountOutTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario joinSwapShareAmountOutTimeout -y
  sleep 8

  echo "> scenario: joinSwapShareAmountOutTimeoutChecks"
  quasartx intergamm test --scenario joinSwapShareAmountOutTimeoutChecks -y

  # Exit pool single denom 2

  echo "> scenario: exitSwapShareAmountIn"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario exitSwapShareAmountIn -y
  sleep 8

  echo "> scenario: exitSwapShareAmountInChecks"
  quasartx intergamm test --scenario exitSwapShareAmountInChecks -y

  echo "> scenario: exitSwapShareAmountInTimeout"
  quasartx intergamm test --scenario setup -y
  sleep 8
  quasartx intergamm test --scenario exitSwapShareAmountInTimeout -y
  sleep 8

  echo "> scenario: exitSwapShareAmountInTimeoutChecks"
  quasartx intergamm test --scenario exitSwapShareAmountInTimeoutChecks -y
}

"$@"
